C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE APP
OBJECT MODULE PLACED IN .\app.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe app.c LARGE OMF2 PRINT(.\app.lst) OBJECT(.\app.obj) WARNINGLEVEL(0)

line level    source

   1          
   2          #define MANGLED_NESC_APP_C
   3          #define nx_struct struct
   4          #define nx_union union
   5          #define dbg(mode, format) ((void)0)
   6          #define dbg_clear(mode, format) ((void)0)
   7          #define dbg_active(mode) 0
   8          //# 8 "/opt/emdoor/tos/chips/cc2430/mcs51/keil_stdint.h"
   9          typedef signed char int8_t;
  10          typedef short int16_t;
  11          
  12          
  13          
  14          typedef long int32_t;
  15          
  16          
  17          
  18          
  19          
  20          
  21          
  22          typedef unsigned char uint8_t;
  23          typedef unsigned short uint16_t;
  24          
  25          
  26          
  27          typedef unsigned long uint32_t;
  28          
  29          
  30          
  31          //# 19 "/opt/emdoor/tos/chips/cc2430/mcs51/stdint.h"
  32          typedef signed char int_least8_t;
  33          typedef short int int_least16_t;
  34          typedef long int_least32_t;
  35          
  36          
  37          
  38          /*__extension__*/ 
  39          typedef long  int int_least64_t;
  40          
  41          
  42          
  43          typedef unsigned char uint_least8_t;
  44          typedef unsigned short uint_least16_t;
  45          typedef unsigned long uint_least32_t;
  46          
  47          
  48          
  49          /*__extension__*/ 
  50          typedef unsigned long  int uint_least64_t;
  51          
  52          
  53          
  54          
  55          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 2   

  56          
  57          typedef signed char int_fast8_t;
  58          
  59          
  60          
  61          
  62          
  63          typedef int int_fast16_t;
  64          typedef int int_fast32_t;
  65          /*__extension__*/ 
  66          typedef long  int int_fast64_t;
  67          
  68          
  69          
  70          typedef unsigned char uint_fast8_t;
  71          
  72          
  73          
  74          
  75          
  76          typedef unsigned int uint_fast16_t;
  77          typedef unsigned int uint_fast32_t;
  78          /*__extension__*/ 
  79          typedef unsigned long  int uint_fast64_t;
  80          //# 79 "/opt/emdoor/tos/chips/cc2430/mcs51/stdint.h" 3
  81          typedef int intptr_t;
  82          
  83          
  84          typedef unsigned int uintptr_t;
  85          
  86          
  87          
  88          
  89          
  90          
  91          
  92          
  93          /*__extension__*/ 
  94          typedef long  int intmax_t;
  95          /*__extension__*/ 
  96          typedef unsigned long  int uintmax_t;
  97          //# 231 "/usr/include/inttypes.h"
  98          //#line 228
  99          typedef struct __nesc_unnamed4242 {
 100            intmax_t quot;
 101            intmax_t rem;
 102          } imaxdiv_t;
 103          //# 385 "/usr/lib/ncc/nesc_nx.h"
 104          typedef struct { char _data[1]; } /*__attribute__((packed))*/ nx_int8_t;typedef int8_t __nesc_nxbase_nx_in
             -t8_t  ;
 105          typedef struct { char _data[2]; } /*__attribute__((packed))*/ nx_int16_t;typedef int16_t __nesc_nxbase_nx_
             -int16_t  ;
 106          typedef struct { char _data[4]; } /*__attribute__((packed))*/ nx_int32_t;typedef int32_t __nesc_nxbase_nx_
             -int32_t  ;
 107          typedef struct { char _data[8]; } /*__attribute__((packed))*/ nx_int64_t;typedef int32_t __nesc_nxbase_nx_
             -int64_t  ;
 108          typedef struct { char _data[1]; } /*__attribute__((packed))*/ nx_uint8_t;typedef uint8_t __nesc_nxbase_nx_
             -uint8_t  ;
 109          typedef struct { char _data[2]; } /*__attribute__((packed))*/ nx_uint16_t;typedef uint16_t __nesc_nxbase_n
             -x_uint16_t  ;
 110          typedef struct { char _data[4]; } /*__attribute__((packed))*/ nx_uint32_t;typedef uint32_t __nesc_nxbase_n
             -x_uint32_t  ;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 3   

 111          typedef struct { char _data[8]; } /*__attribute__((packed))*/ nx_uint64_t;typedef uint32_t __nesc_nxbase_n
             -x_uint64_t  ;
 112          
 113          
 114          typedef struct { char _data[1]; } /*__attribute__((packed))*/ nxle_int8_t;typedef int8_t __nesc_nxbase_nxl
             -e_int8_t  ;
 115          typedef struct { char _data[2]; } /*__attribute__((packed))*/ nxle_int16_t;typedef int16_t __nesc_nxbase_n
             -xle_int16_t  ;
 116          typedef struct { char _data[4]; } /*__attribute__((packed))*/ nxle_int32_t;typedef int32_t __nesc_nxbase_n
             -xle_int32_t  ;
 117          typedef struct { char _data[8]; } /*__attribute__((packed))*/ nxle_int64_t;typedef int32_t __nesc_nxbase_n
             -xle_int64_t  ;
 118          typedef struct { char _data[1]; } /*__attribute__((packed))*/ nxle_uint8_t;typedef uint8_t __nesc_nxbase_n
             -xle_uint8_t  ;
 119          typedef struct { char _data[2]; } /*__attribute__((packed))*/ nxle_uint16_t;typedef uint16_t __nesc_nxbase
             -_nxle_uint16_t  ;
 120          typedef struct { char _data[4]; } /*__attribute__((packed))*/ nxle_uint32_t;typedef uint32_t __nesc_nxbase
             -_nxle_uint32_t  ;
 121          typedef struct { char _data[8]; } /*__attribute__((packed))*/ nxle_uint64_t;typedef uint32_t __nesc_nxbase
             -_nxle_uint64_t  ;
 122          //# 26 "/usr/include/machine/_types.h"
 123          typedef signed char __int8_t;
 124          typedef unsigned char __uint8_t;
 125          
 126          
 127          
 128          
 129          
 130          
 131          
 132          
 133          typedef signed short __int16_t;
 134          typedef unsigned short __uint16_t;
 135          
 136          
 137          
 138          
 139          
 140          
 141          
 142          
 143          typedef __int16_t __int_least16_t;
 144          typedef __uint16_t __uint_least16_t;
 145          //# 58 "/usr/include/machine/_types.h" 3
 146          typedef signed int __int32_t;
 147          typedef unsigned int __uint32_t;
 148          //#line 76
 149          typedef __int32_t __int_least32_t;
 150          typedef __uint32_t __uint_least32_t;
 151          //#line 99
 152          typedef signed long  __int64_t;
 153          typedef unsigned long  __uint64_t;
 154          //# 14 "/usr/include/sys/lock.h"
 155          typedef void *_LOCK_T;
 156          //# 14 "/usr/include/sys/_types.h"
 157          typedef long _off_t;
 158          /*__extension__*/ 
 159          //#line 15
 160          typedef long  _off64_t;
 161          
 162          
 163          typedef int _ssize_t;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 4   

 164          //# 354 "/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stddef.h" 3
 165          typedef unsigned int wint_t;
 166          //# 35 "/usr/include/sys/_types.h"
 167          //#line 27
 168          typedef struct __nesc_unnamed4243 {
 169          
 170            int __count;
 171            union __nesc_unnamed4244 {
 172          
 173              wint_t __wch;
 174              unsigned char __wchb[4];
 175            } __value;
 176          } _mbstate_t;
 177          
 178          typedef _LOCK_T _flock_t;
 179          
 180          
 181          typedef void *_iconv_t;
 182          //# 151 "/usr/lib/gcc/i686-pc-cygwin/3.4.4/include/stddef.h" 3
 183          typedef int ptrdiff_t;
 184          //#line 213
 185          typedef unsigned int size_t;
 186          //#line 325
 187          typedef short unsigned int wchar_t;
 188          //# 19 "/usr/include/machine/types.h"
 189          typedef long int __off_t;
 190          typedef int __pid_t;
 191          
 192          /*__extension__*/ 
 193          //#line 22
 194          typedef long  int __loff_t;
 195          //# 92 "/usr/include/sys/types.h"
 196          typedef unsigned char u_char;
 197          typedef unsigned short u_short;
 198          typedef unsigned int u_int;
 199          typedef unsigned long u_long;
 200          
 201          
 202          
 203          typedef unsigned short ushort;
 204          typedef unsigned int uint;
 205          
 206          
 207          
 208          typedef unsigned long clock_t;
 209          
 210          
 211          
 212          
 213          typedef long time_t;
 214          
 215          
 216          
 217          
 218          struct timespec {
 219            time_t tv_sec;
 220            long tv_nsec;
 221          };
 222          
 223          struct itimerspec {
 224            struct timespec it_interval;
 225            struct timespec it_value;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 5   

 226          };
 227          
 228          
 229          typedef long daddr_t;
 230          typedef char *caddr_t;
 231          //# 180 "/usr/include/sys/types.h" 3
 232          typedef int pid_t;
 233          
 234          
 235          
 236          typedef _ssize_t ssize_t;
 237          //#line 203
 238          typedef unsigned short nlink_t;
 239          //#line 225
 240          typedef long fd_mask;
 241          
 242          
 243          
 244          
 245          
 246          
 247          
 248          
 249          
 250          //#line 233
 251          typedef struct _types_fd_set {
 252            fd_mask fds_bits[(64 + (sizeof(fd_mask ) * 8 - 1)) / (sizeof(fd_mask ) * 8)];
 253          } _types_fd_set;
 254          //#line 256
 255          typedef unsigned long clockid_t;
 256          
 257          
 258          
 259          
 260          typedef unsigned long timer_t;
 261          
 262          
 263          
 264          typedef unsigned long useconds_t;
 265          typedef long suseconds_t;
 266          //# 26 "/usr/include/cygwin/types.h"
 267          typedef struct timespec timespec_t;
 268          
 269          
 270          
 271          
 272          typedef struct timespec timestruc_t;
 273          
 274          
 275          
 276          
 277          
 278          typedef _off64_t off_t;
 279          
 280          
 281          
 282          
 283          
 284          typedef __loff_t loff_t;
 285          
 286          
 287          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 6   

 288          typedef short __dev16_t;
 289          typedef unsigned long __dev32_t;
 290          
 291          typedef __dev32_t dev_t;
 292          
 293          
 294          
 295          
 296          
 297          
 298          
 299          typedef long blksize_t;
 300          
 301          
 302          
 303          
 304          typedef long __blkcnt32_t;
 305          typedef long  __blkcnt64_t;
 306          
 307          typedef __blkcnt64_t blkcnt_t;
 308          
 309          
 310          
 311          
 312          
 313          
 314          
 315          typedef unsigned long fsblkcnt_t;
 316          
 317          
 318          
 319          
 320          typedef unsigned long fsfilcnt_t;
 321          
 322          
 323          
 324          
 325          typedef unsigned short __uid16_t;
 326          typedef unsigned long __uid32_t;
 327          
 328          typedef __uid32_t uid_t;
 329          
 330          
 331          
 332          
 333          
 334          
 335          
 336          typedef unsigned short __gid16_t;
 337          typedef unsigned long __gid32_t;
 338          
 339          typedef __gid32_t gid_t;
 340          
 341          
 342          
 343          
 344          
 345          
 346          
 347          typedef unsigned long __ino32_t;
 348          typedef unsigned long  __ino64_t;
 349          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 7   

 350          typedef __ino64_t ino_t;
 351          
 352          
 353          
 354          
 355          
 356          
 357          
 358          
 359          typedef unsigned long id_t;
 360          //# 140 "/usr/include/cygwin/types.h" 3
 361          struct flock {
 362            short l_type;
 363            short l_whence;
 364            off_t l_start;
 365            off_t l_len;
 366          
 367            pid_t l_pid;
 368          };
 369          
 370          
 371          
 372          
 373          
 374          
 375          
 376          typedef long  key_t;
 377          
 378          
 379          
 380          
 381          
 382          
 383          
 384          typedef unsigned long vm_offset_t;
 385          
 386          
 387          
 388          
 389          typedef unsigned long vm_size_t;
 390          
 391          
 392          
 393          
 394          typedef void *vm_object_t;
 395          
 396          
 397          
 398          
 399          typedef unsigned char u_int8_t;
 400          
 401          
 402          
 403          typedef __uint16_t u_int16_t;
 404          
 405          
 406          
 407          typedef __uint32_t u_int32_t;
 408          
 409          
 410          
 411          typedef __uint64_t u_int64_t;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 8   

 412          
 413          
 414          
 415          
 416          typedef __int32_t register_t;
 417          
 418          
 419          
 420          
 421          typedef char *addr_t;
 422          
 423          
 424          
 425          
 426          typedef unsigned mode_t;
 427          
 428          
 429          
 430          
 431          
 432          typedef struct __pthread_t {
 433          //#line 211
 434            char __dummy;
 435          } *
 436          //#line 211
 437          pthread_t;
 438          typedef struct __pthread_mutex_t {
 439          //#line 212
 440            char __dummy;
 441          } *
 442          //#line 212
 443          pthread_mutex_t;
 444          
 445          typedef struct __pthread_key_t {
 446          //#line 214
 447            char __dummy;
 448          } *
 449          //#line 214
 450          pthread_key_t;
 451          typedef struct __pthread_attr_t {
 452          //#line 215
 453            char __dummy;
 454          } *
 455          //#line 215
 456          pthread_attr_t;
 457          typedef struct __pthread_mutexattr_t {
 458          //#line 216
 459            char __dummy;
 460          } *
 461          //#line 216
 462          pthread_mutexattr_t;
 463          typedef struct __pthread_condattr_t {
 464          //#line 217
 465            char __dummy;
 466          } *
 467          //#line 217
 468          pthread_condattr_t;
 469          typedef struct __pthread_cond_t {
 470          //#line 218
 471            char __dummy;
 472          } *
 473          //#line 218
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 9   

 474          pthread_cond_t;
 475          
 476          
 477          
 478          
 479          
 480          
 481          
 482          //#line 221
 483          typedef struct __nesc_unnamed4245 {
 484          
 485            pthread_mutex_t mutex;
 486            int state;
 487          } 
 488          pthread_once_t;
 489          typedef struct __pthread_rwlock_t {
 490          //#line 227
 491            char __dummy;
 492          } *
 493          //#line 227
 494          pthread_rwlock_t;
 495          typedef struct __pthread_rwlockattr_t {
 496          //#line 228
 497            char __dummy;
 498          } *
 499          //#line 228
 500          pthread_rwlockattr_t;
 501          //# 9 "/opt/emdoor/tos/chips/cc2430/mcs51/string.h"
 502          extern void *memset(void *s, char val, int n);
 503          //# 11 "/opt/emdoor/tos/chips/cc2430/mcs51/stdlib.h"
 504          typedef int (*__compar_fn_t)(const void *, const void *);
 505          //# 19 "/usr/include/sys/reent.h"
 506          typedef unsigned long __ULong;
 507          //# 40 "/usr/include/sys/reent.h" 3
 508          struct _Bigint {
 509          
 510            struct _Bigint *_next;
 511            int _k, _maxwds, _sign, _wds;
 512            __ULong _x[1];
 513          };
 514          
 515          
 516          struct __tm {
 517          
 518            int __tm_sec;
 519            int __tm_min;
 520            int __tm_hour;
 521            int __tm_mday;
 522            int __tm_mon;
 523            int __tm_year;
 524            int __tm_wday;
 525            int __tm_yday;
 526            int __tm_isdst;
 527          };
 528          
 529          
 530          
 531          
 532          
 533          
 534          
 535          struct _on_exit_args {
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 10  

 536            void *_fnargs[32];
 537            void *_dso_handle[32];
 538          
 539            __ULong _fntypes;
 540          
 541          
 542            __ULong _is_cxa;
 543          };
 544          
 545          
 546          
 547          
 548          
 549          
 550          
 551          
 552          
 553          struct _atexit {
 554            struct _atexit *_next;
 555            int _ind;
 556          
 557            void (*_fns[32])(void );
 558            struct _on_exit_args _on_exit_args;
 559          };
 560          
 561          
 562          
 563          
 564          
 565          
 566          
 567          
 568          
 569          struct __sbuf {
 570            unsigned char *_base;
 571            int _size;
 572          };
 573          
 574          
 575          
 576          
 577          
 578          
 579          typedef long _fpos_t;
 580          
 581          
 582          
 583          typedef _off64_t _fpos64_t;
 584          //#line 166
 585          struct __sFILE {
 586            unsigned char *_p;
 587            int _r;
 588            int _w;
 589            short _flags;
 590            short _file;
 591            struct __sbuf _bf;
 592            int _lbfsize;
 593          
 594          
 595          
 596          
 597          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 11  

 598          
 599            void *_cookie;
 600          
 601            _ssize_t /*__attribute((__cdecl__))*/ (*_read)(void *_cookie, char *_buf, int _n);
 602            _ssize_t /*__attribute((__cdecl__))*/ (*_write)(void *_cookie, const char *_buf, int _n);
 603          
 604            _fpos_t /*__attribute((__cdecl__))*/ (*_seek)(void *_cookie, _fpos_t _offset, int _whence);
 605            int /*__attribute((__cdecl__))*/ (*_close)(void *_cookie);
 606          
 607          
 608            struct __sbuf _ub;
 609            unsigned char *_up;
 610            int _ur;
 611          
 612          
 613            unsigned char _ubuf[3];
 614            unsigned char _nbuf[1];
 615          
 616          
 617            struct __sbuf _lb;
 618          
 619          
 620            int _blksize;
 621            int _offset;
 622          
 623          
 624            struct _reent *__data;
 625          
 626          
 627          
 628            _flock_t _lock;
 629          };
 630          
 631          
 632          
 633          struct __sFILE64 {
 634            unsigned char *_p;
 635            int _r;
 636            int _w;
 637            short _flags;
 638            short _file;
 639            struct __sbuf _bf;
 640            int _lbfsize;
 641          
 642            struct _reent *__data;
 643          
 644          
 645            void *_cookie;
 646          
 647            _ssize_t /*__attribute((__cdecl__))*/ (*_read)(void *_cookie, char *_buf, int _n);
 648            _ssize_t /*__attribute((__cdecl__))*/ (*_write)(void *_cookie, const char *_buf, int _n);
 649          
 650            _fpos_t /*__attribute((__cdecl__))*/ (*_seek)(void *_cookie, _fpos_t _offset, int _whence);
 651            int /*__attribute((__cdecl__))*/ (*_close)(void *_cookie);
 652          
 653          
 654            struct __sbuf _ub;
 655            unsigned char *_up;
 656            int _ur;
 657          
 658          
 659            unsigned char _ubuf[3];
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 12  

 660            unsigned char _nbuf[1];
 661          
 662          
 663            struct __sbuf _lb;
 664          
 665          
 666            int _blksize;
 667            int _flags2;
 668          
 669            _off64_t _offset;
 670            _fpos64_t /*__attribute((__cdecl__))*/ (*_seek64)(void *_cookie, _fpos64_t _offset, int _whence);
 671          
 672          
 673            _flock_t _lock;
 674          };
 675          
 676          typedef struct __sFILE64 __FILE;
 677          
 678          
 679          
 680          
 681          struct _glue {
 682          
 683            struct _glue *_next;
 684            int _niobs;
 685            __FILE *_iobs;
 686          };
 687          //#line 290
 688          struct _rand48 {
 689            unsigned short _seed[3];
 690            unsigned short _mult[3];
 691            unsigned short _add;
 692          };
 693          //#line 565
 694          struct _reent {
 695          
 696            int _errno;
 697          
 698          
 699          
 700          
 701            __FILE *_stdin, *_stdout, *_stderr;
 702          
 703            int _inc;
 704            char _emergency[25];
 705          
 706            int _current_category;
 707            const char *_current_locale;
 708          
 709            int __sdidinit;
 710          
 711            void /*__attribute((__cdecl__))*/ (*__cleanup)(struct _reent *);
 712          
 713          
 714            struct _Bigint *_result;
 715            int _result_k;
 716            struct _Bigint *_p5s;
 717            struct _Bigint **_freelist;
 718          
 719          
 720            int _cvtlen;
 721            char *_cvtbuf;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 13  

 722          
 723            union __nesc_unnamed4246 {
 724          
 725              struct __nesc_unnamed4247 {
 726          
 727                unsigned int _unused_rand;
 728                char *_strtok_last;
 729                char _asctime_buf[26];
 730                struct __tm _localtime_buf;
 731                int _gamma_signgam;
 732                /*__extension__*/ unsigned long  _rand_next;
 733                struct _rand48 _r48;
 734                _mbstate_t _mblen_state;
 735                _mbstate_t _mbtowc_state;
 736                _mbstate_t _wctomb_state;
 737                char _l64a_buf[8];
 738                char _signal_buf[24];
 739                int _getdate_err;
 740                _mbstate_t _mbrlen_state;
 741                _mbstate_t _mbrtowc_state;
 742                _mbstate_t _mbsrtowcs_state;
 743                _mbstate_t _wcrtomb_state;
 744                _mbstate_t _wcsrtombs_state;
 745              } _reent;
 746          
 747          
 748          
 749              struct __nesc_unnamed4248 {
 750          
 751          
 752                unsigned char *_nextf[30];
 753                unsigned int _nmalloc[30];
 754              } _unused;
 755            } _new;
 756          
 757          
 758            struct _atexit *_atexit;
 759            struct _atexit _atexit0;
 760          
 761          
 762            void (**_sig_func)(int );
 763          
 764          
 765          
 766          
 767            struct _glue __sglue;
 768            __FILE __sf[3];
 769          };
 770          //#line 799
 771          struct _reent;
 772          struct _reent;
 773          
 774          
 775          
 776          
 777          
 778          
 779          
 780          
 781          
 782          struct _reent;
 783          //# 11 "/usr/include/math.h"
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 14  

 784          union __dmath {
 785          
 786            __ULong i[2];
 787            double d;
 788          };
 789          
 790          union __fmath {
 791          
 792            __ULong i[1];
 793            float f;
 794          };
 795          
 796          union __ldmath {
 797          
 798            __ULong i[4];
 799            long double ld;
 800          };
 801          //# 111 "/usr/include/math.h" 3
 802          typedef float float_t;
 803          typedef double double_t;
 804          //#line 344
 805          struct exception {
 806          
 807          
 808            int type;
 809            char *name;
 810            double arg1;
 811            double arg2;
 812            double retval;
 813            int err;
 814          };
 815          //#line 399
 816          enum __fdlibm_version {
 817          
 818            __fdlibm_ieee = -1, 
 819            __fdlibm_svid, 
 820            __fdlibm_xopen, 
 821            __fdlibm_posix
 822          };
 823          
 824          
 825          
 826          
 827          enum __fdlibm_version;
 828          //# 20 "/opt/emdoor/tos/system/tos.h"
 829          typedef uint8_t bool  ;
 830          enum __nesc_unnamed4249 {
 831          //#line 21
 832            FALSE = 0, TRUE = 1
 833          };
 834          
 835          
 836          
 837          
 838          
 839          
 840          
 841          
 842          
 843          typedef nx_int8_t nx_bool;
 844          uint16_t TOS_NODE_ID = 0xFEFE;
 845          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 15  

 846          
 847          
 848          
 849          
 850          /*struct __nesc_attr_atmostonce {
 851          };*/
 852          //#line 40
 853          /*struct __nesc_attr_atleastonce {
 854          };*/
 855          //#line 41
 856          /*struct __nesc_attr_exactlyonce {
 857          };*/
 858          //# 6 "/opt/emdoor/tos/types/AM.h"
 859          typedef nx_uint8_t nx_am_id_t;
 860          typedef nx_uint8_t nx_am_group_t;
 861          typedef nx_uint16_t nx_am_addr_t;
 862          
 863          typedef uint8_t am_id_t;
 864          typedef uint8_t am_group_t;
 865          typedef uint16_t am_addr_t;
 866          
 867          enum __nesc_unnamed4250 {
 868            AM_BROADCAST_ADDR = 0xffff
 869          };
 870          
 871          
 872          
 873          
 874          
 875          
 876          
 877          
 878          
 879          enum __nesc_unnamed4251 {
 880            TOS_AM_GROUP = 0x22, 
 881            TOS_AM_ADDRESS = 1
 882          };
 883          //# 17 "/opt/emdoor/tos/platforms/zigbem/platform.h"
 884          uint16_t TOS_IEEE_SADDR = TOS_AM_ADDRESS;
 885          uint16_t TOS_IEEE_PANID = TOS_AM_GROUP;
 886          //# 3 "/opt/emdoor/tos/platforms/zigbem/platform_interrupt.h"
 887          typedef uint8_t TPlatformIntUser;
 888          typedef uint8_t TPlatformIntOSA;
 889          //# 34 "/opt/emdoor/tos/types/TinyError.h"
 890          enum __nesc_unnamed4252 {
 891            SUCCESS = 0, 
 892            FAIL = 1, 
 893            ESIZE = 2, 
 894            ECANCEL = 3, 
 895            EOFF = 4, 
 896            EBUSY = 5, 
 897            EINVAL = 6, 
 898            ERETRY = 7, 
 899            ERESERVE = 8, 
 900            EALREADY = 9
 901          };
 902          
 903          typedef uint8_t error_t  ;
 904          //# 64 "/opt/emdoor/tos/chips/cc2430/mcs51/io8051.h"
 905          sfr PCON = 0x87;
 906          //#line 143
 907          sbit EA = 0xAF;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 16  

 908          //#line 158
 909          sbit P0_1 = 0x81;
 910          //#line 177
 911          sbit P1_0 = 0x90;
 912          sbit P1_1 = 0x91;
 913          sbit P1_2 = 0x92;
 914          sbit P1_3 = 0x93;
 915          sbit P1_4 = 0x94;
 916          //#line 193
 917          sbit P2_0 = 0xA0;
 918          //# 56 "/opt/emdoor/tos/chips/cc2430/ioCC2430.h"
 919          enum __nesc_unnamed4253 {
 920            CC2430_IEN0_EA = 0x7, 
 921            CC2430_IEN0_STIE = 0x5, 
 922            CC2430_IEN0_ENCIE = 0x4, 
 923            CC2430_IEN0_URX1IE = 0x3, 
 924            CC2430_IEN0_URX0IE = 0x2, 
 925            CC2430_IEN0_ADCIE = 0x1, 
 926            CC2430_IEN0_RFERRIE = 0x0
 927          };
 928          
 929          
 930          
 931          
 932          
 933          enum __nesc_unnamed4254 {
 934            CC2430_IEN2_WDTIE = 0x5, 
 935            CC2430_IEN2_P1IE = 0x4, 
 936            CC2430_IEN2_UTX1IE = 0x3, 
 937            CC2430_IEN2_UTX0IE = 0x2, 
 938            CC2430_IEN2_P2IE = 0x1, 
 939            CC2430_IEN2_RFIE = 0x0
 940          };
 941          
 942          
 943          
 944          
 945          
 946          enum __nesc_unnamed4255 {
 947            CC2430_IRCON_STIF = 0x7, 
 948            CC2430_IRCON_P0IF = 0x5, 
 949            CC2430_IRCON_T4IF = 0x4, 
 950            CC2430_IRCON_T3IF = 0x3, 
 951            CC2430_IRCON_T2IF = 0x2, 
 952            CC2430_IRCON_T1IF = 0x1, 
 953            CC2430_IRCON_DMAIF = 0x0
 954          };
 955          
 956          
 957          
 958          
 959          
 960          enum __nesc_unnamed4256 {
 961            CC2430_IRCON2_WDTIF = 0x4, 
 962            CC2430_IRCON2_P1IF = 0x3, 
 963            CC2430_IRCON2_UTX1IF = 0x2, 
 964            CC2430_IRCON2_UTX0IF = 0x1, 
 965            CC2430_IRCON2_P2IF = 0x0
 966          };
 967          
 968          
 969          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 17  

 970          
 971          
 972          enum __nesc_unnamed4257 {
 973            CC2430_RFIM_RREG_PD = 0x7, 
 974            CC2430_RFIM_TXDONE = 0x6, 
 975            CC2430_RFIM_FIFOP = 0x5, 
 976            CC2430_RFIM_SFD = 0x4, 
 977            CC2430_RFIM_CCA = 0x3, 
 978            CC2430_RFIM_CSP_WT = 0x2, 
 979            CC2430_RFIM_CSP_STOP = 0x1, 
 980            CC2430_RFIM_CSP_INT = 0x0
 981          };
 982          
 983          
 984          
 985          
 986          
 987          enum __nesc_unnamed4258 {
 988            CC2430_RFIF_RREG_ON = 0x7, 
 989            CC2430_RFIF_TXDONE = 0x6, 
 990            CC2430_RFIF_FIFOP = 0x5, 
 991            CC2430_RFIF_SFD = 0x4, 
 992            CC2430_RFIF_CCA = 0x3, 
 993            CC2430_RFIF_CSP_WT = 0x2, 
 994            CC2430_RFIF_CSP_STOP = 0x1, 
 995            CC2430_RFIF_CSP_INT = 0x0
 996          };
 997          //#line 246
 998          sfr SLEEP = 0xBE;
 999          //#line 262
1000          sfr CLKCON = 0xC6;
1001          sfr MEMCTR = 0xC7;
1002          //#line 350
1003          sfr P0_DIR = 0xFD;
1004          sfr P1_DIR = 0xFE;
1005          sfr P2_DIR = 0xFF;
1006          //#line 392
1007          //typedef uint16_t uint16_t _data;
1008          //typedef uint8_t uint8_t _data;
1009          
1010          //typedef uint16_t uint16_t xdata;
1011          //typedef uint8_t uint8_t xdata;
1012          
1013          //typedef uint16_t uint16_t code;
1014          //typedef uint8_t uint8_t code;
1015          
1016          
1017          //typedef uint32_t uint32_t_xdata_pm0;
1018          //typedef uint16_t uint16_t xdata_pm0;
1019          //typedef uint8_t uint8_t xdata_pm0;
1020          //# 42 "/opt/emdoor/tos/chips/cc2430/radio/CC2420.h"
1021          typedef uint8_t cc2420_status_t;
1022          //#line 67
1023          //#line 48
1024          typedef nx_struct cc2420_header_t {
1025            nxle_uint8_t length;
1026            nxle_uint16_t fcf;
1027            nxle_uint8_t dsn;
1028            nxle_uint16_t destpan;
1029            nxle_uint16_t dest;
1030            nxle_uint16_t src;
1031          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 18  

1032          
1033          
1034          
1035          
1036          
1037            nxle_uint8_t type;
1038          
1039          
1040            nx_am_group_t group;
1041          } /*__attribute__((packed))*/ 
1042          
1043          cc2420_header_t;
1044          
1045          
1046          
1047          
1048          
1049          
1050          
1051          //#line 72
1052          typedef nx_struct cc2420_footer_t {
1053          
1054            nxle_uint8_t i;
1055          } /*__attribute__((packed))*/ cc2420_footer_t;
1056          //#line 96
1057          //#line 81
1058          typedef nx_struct cc2420_meta_data_t {
1059            nx_uint8_t tx_power;
1060            nx_uint8_t rssi;
1061            nx_uint8_t lqi;
1062            nx_bool crc;
1063            nx_bool ack;
1064            nx_uint16_t time;
1065            nx_uint16_t rxInterval;
1066          } /*__attribute__((packed))*/ 
1067          
1068          
1069          
1070          
1071          
1072          
1073          cc2420_meta_data_t;
1074          
1075          
1076          
1077          
1078          
1079          
1080          //#line 99
1081          typedef nx_struct cc2420_packet_t {
1082            cc2420_header_t packet;
1083          
1084            nx_uint8_t _data[42];
1085          } /*__attribute__((packed))*/ cc2420_packet_t;
1086          //#line 134
1087          enum __nesc_unnamed4259 {
1088          
1089            MAC_HEADER_SIZE = sizeof(cc2420_header_t ) - 1, 
1090          
1091            MAC_FOOTER_SIZE = sizeof(uint16_t ), 
1092          
1093            MAC_PROTOCOL_SIZE = MAC_HEADER_SIZE + MAC_FOOTER_SIZE, 
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 19  

1094          
1095            MAC_PACKET_SIZE = MAC_HEADER_SIZE + 114 + MAC_FOOTER_SIZE
1096          };
1097          
1098          enum cc2420_enums {
1099            CC2420_TIME_ACK_TURNAROUND = 7, 
1100            CC2420_TIME_VREN = 20, 
1101            CC2420_TIME_SYMBOL = 2, 
1102            CC2420_BACKOFF_PERIOD = 20 / CC2420_TIME_SYMBOL, 
1103            CC2420_MIN_BACKOFF = 20 / CC2420_TIME_SYMBOL, 
1104            CC2420_ACK_WAIT_DELAY = 256, 
1105            CC2420_TXDONE_PERIOD = 128
1106          };
1107          
1108          enum cc2420_status_enums {
1109            CC2420_STATUS_RSSI_VALID = 1 << 1, 
1110            CC2420_STATUS_LOCK = 1 << 2, 
1111            CC2420_STATUS_TX_ACTIVE = 1 << 3, 
1112            CC2420_STATUS_ENC_BUSY = 1 << 4, 
1113            CC2420_STATUS_TX_UNDERFLOW = 1 << 5, 
1114            CC2420_STATUS_XOSC16M_STABLE = 1 << 6
1115          };
1116          
1117          enum cc2420_config_reg_enums {
1118            CC2420_SNOP = 0x00, 
1119            CC2420_SXOSCON = 0x01, 
1120            CC2420_STXCAL = 0x02, 
1121            CC2420_SRXON = 0x03, 
1122            CC2420_STXON = 0x04, 
1123            CC2420_STXONCCA = 0x05, 
1124            CC2420_SRFOFF = 0x06, 
1125            CC2420_SXOSCOFF = 0x07, 
1126            CC2420_SFLUSHRX = 0x08, 
1127            CC2420_SFLUSHTX = 0x09, 
1128            CC2420_SACK = 0x0a, 
1129            CC2420_SACKPEND = 0x0b, 
1130            CC2420_SRXDEC = 0x0c, 
1131            CC2420_STXENC = 0x0d, 
1132            CC2420_SAES = 0x0e, 
1133            CC2420_MAIN = 0x10, 
1134            CC2420_MDMCTRL0 = 0x11, 
1135            CC2420_MDMCTRL1 = 0x12, 
1136            CC2420_RSSI = 0x13, 
1137            CC2420_SYNCWORD = 0x14, 
1138            CC2420_TXCTRL = 0x15, 
1139            CC2420_RXCTRL0 = 0x16, 
1140            CC2420_RXCTRL1 = 0x17, 
1141            CC2420_FSCTRL = 0x18, 
1142            CC2420_SECCTRL0 = 0x19, 
1143            CC2420_SECCTRL1 = 0x1a, 
1144            CC2420_BATTMON = 0x1b, 
1145            CC2420_IOCFG0 = 0x1c, 
1146            CC2420_IOCFG1 = 0x1d, 
1147            CC2420_MANFIDL = 0x1e, 
1148            CC2420_MANFIDH = 0x1f, 
1149            CC2420_FSMTC = 0x20, 
1150            CC2420_MANAND = 0x21, 
1151            CC2420_MANOR = 0x22, 
1152            CC2420_AGCCTRL = 0x23, 
1153            CC2420_AGCTST0 = 0x24, 
1154            CC2420_AGCTST1 = 0x25, 
1155            CC2420_AGCTST2 = 0x26, 
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 20  

1156            CC2420_FSTST0 = 0x27, 
1157            CC2420_FSTST1 = 0x28, 
1158            CC2420_FSTST2 = 0x29, 
1159            CC2420_FSTST3 = 0x2a, 
1160            CC2420_RXBPFTST = 0x2b, 
1161            CC2420_FMSTATE = 0x2c, 
1162            CC2420_ADCTST = 0x2d, 
1163            CC2420_DACTST = 0x2e, 
1164            CC2420_TOPTST = 0x2f, 
1165            CC2420_TXFIFO = 0x3e, 
1166            CC2420_RXFIFO = 0x3f
1167          };
1168          
1169          enum cc2420_ram_addr_enums {
1170            CC2420_RAM_TXFIFO = 0x000, 
1171            CC2420_RAM_RXFIFO = 0x080, 
1172            CC2420_RAM_KEY0 = 0x100, 
1173            CC2420_RAM_RXNONCE = 0x110, 
1174            CC2420_RAM_SABUF = 0x120, 
1175            CC2420_RAM_KEY1 = 0x130, 
1176            CC2420_RAM_TXNONCE = 0x140, 
1177            CC2420_RAM_CBCSTATE = 0x150, 
1178            CC2420_RAM_IEEEADR = 0x160, 
1179            CC2420_RAM_PANID = 0x168, 
1180            CC2420_RAM_SHORTADR = 0x16a
1181          };
1182          
1183          enum cc2420_nonce_enums {
1184            CC2420_NONCE_BLOCK_COUNTER = 0, 
1185            CC2420_NONCE_KEY_SEQ_COUNTER = 2, 
1186            CC2420_NONCE_FRAME_COUNTER = 3, 
1187            CC2420_NONCE_SOURCE_ADDRESS = 7, 
1188            CC2420_NONCE_FLAGS = 15
1189          };
1190          
1191          enum cc2420_main_enums {
1192            CC2420_MAIN_RESETn = 15, 
1193            CC2420_MAIN_ENC_RESETn = 14, 
1194            CC2420_MAIN_DEMOD_RESETn = 13, 
1195            CC2420_MAIN_MOD_RESETn = 12, 
1196            CC2420_MAIN_FS_RESETn = 11, 
1197            CC2420_MAIN_XOSC16M_BYPASS = 0
1198          };
1199          
1200          enum cc2420_mdmctrl0_enums {
1201            CC2420_MDMCTRL0_RESERVED_FRAME_MODE = 13, 
1202            CC2420_MDMCTRL0_PAN_COORDINATOR = 12, 
1203            CC2420_MDMCTRL0_ADR_DECODE = 11, 
1204            CC2420_MDMCTRL0_CCA_HYST = 8, 
1205            CC2420_MDMCTRL0_CCA_MOD = 6, 
1206            CC2420_MDMCTRL0_AUTOCRC = 5, 
1207            CC2420_MDMCTRL0_AUTOACK = 4, 
1208            CC2420_MDMCTRL0_PREAMBLE_LENGTH = 0
1209          };
1210          
1211          enum cc2420_mdmctrl1_enums {
1212            CC2420_MDMCTRL1_CORR_THR = 6, 
1213            CC2420_MDMCTRL1_DEMOD_AVG_MODE = 5, 
1214            CC2420_MDMCTRL1_MODULATION_MODE = 4, 
1215            CC2420_MDMCTRL1_TX_MODE = 2, 
1216            CC2420_MDMCTRL1_RX_MODE = 0
1217          };
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 21  

1218          
1219          enum cc2420_rssi_enums {
1220            CC2420_RSSI_CCA_THR = 8, 
1221            CC2420_RSSI_RSSI_VAL = 0
1222          };
1223          
1224          enum cc2420_syncword_enums {
1225            CC2420_SYNCWORD_SYNCWORD = 0
1226          };
1227          
1228          enum cc2420_txctrl_enums {
1229            CC2420_TXCTRL_TXMIXBUF_CUR = 14, 
1230            CC2420_TXCTRL_TX_TURNAROUND = 13, 
1231            CC2420_TXCTRL_TXMIX_CAP_ARRAY = 11, 
1232            CC2420_TXCTRL_TXMIX_CURRENT = 9, 
1233            CC2420_TXCTRL_PA_CURRENT = 6, 
1234            CC2420_TXCTRL_RESERVED = 5, 
1235            CC2420_TXCTRL_PA_LEVEL = 0
1236          };
1237          
1238          enum cc2420_rxctrl0_enums {
1239            CC2420_RXCTRL0_RXMIXBUF_CUR = 12, 
1240            CC2420_RXCTRL0_HIGH_LNA_GAIN = 10, 
1241            CC2420_RXCTRL0_MED_LNA_GAIN = 8, 
1242            CC2420_RXCTRL0_LOW_LNA_GAIN = 6, 
1243            CC2420_RXCTRL0_HIGH_LNA_CURRENT = 4, 
1244            CC2420_RXCTRL0_MED_LNA_CURRENT = 2, 
1245            CC2420_RXCTRL0_LOW_LNA_CURRENT = 0
1246          };
1247          
1248          enum cc2420_rxctrl1_enums {
1249            CC2420_RXCTRL1_RXBPF_LOCUR = 13, 
1250            CC2420_RXCTRL1_RXBPF_MIDCUR = 12, 
1251            CC2420_RXCTRL1_LOW_LOWGAIN = 11, 
1252            CC2420_RXCTRL1_MED_LOWGAIN = 10, 
1253            CC2420_RXCTRL1_HIGH_HGM = 9, 
1254            CC2420_RXCTRL1_MED_HGM = 8, 
1255            CC2420_RXCTRL1_LNA_CAP_ARRAY = 6, 
1256            CC2420_RXCTRL1_RXMIX_TAIL = 4, 
1257            CC2420_RXCTRL1_RXMIX_VCM = 2, 
1258            CC2420_RXCTRL1_RXMIX_CURRENT = 0
1259          };
1260          
1261          enum cc2420_rsctrl_enums {
1262            CC2420_FSCTRL_LOCK_THR = 14, 
1263            CC2420_FSCTRL_CAL_DONE = 13, 
1264            CC2420_FSCTRL_CAL_RUNNING = 12, 
1265            CC2420_FSCTRL_LOCK_LENGTH = 11, 
1266            CC2420_FSCTRL_LOCK_STATUS = 10, 
1267            CC2420_FSCTRL_FREQ = 0
1268          };
1269          
1270          enum cc2420_secctrl0_enums {
1271            CC2420_SECCTRL0_RXFIFO_PROTECTION = 9, 
1272            CC2420_SECCTRL0_SEC_CBC_HEAD = 8, 
1273            CC2420_SECCTRL0_SEC_SAKEYSEL = 7, 
1274            CC2420_SECCTRL0_SEC_TXKEYSEL = 6, 
1275            CC2420_SECCTRL0_SEC_RXKEYSEL = 5, 
1276            CC2420_SECCTRL0_SEC_M = 2, 
1277            CC2420_SECCTRL0_SEC_MODE = 0
1278          };
1279          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 22  

1280          enum cc2420_secctrl1_enums {
1281            CC2420_SECCTRL1_SEC_TXL = 8, 
1282            CC2420_SECCTRL1_SEC_RXL = 0
1283          };
1284          
1285          enum cc2420_battmon_enums {
1286            CC2420_BATTMON_BATT_OK = 6, 
1287            CC2420_BATTMON_BATTMON_EN = 5, 
1288            CC2420_BATTMON_BATTMON_VOLTAGE = 0
1289          };
1290          
1291          enum cc2420_iocfg0_enums {
1292            CC2420_IOCFG0_BCN_ACCEPT = 11, 
1293            CC2420_IOCFG0_FIFO_POLARITY = 10, 
1294            CC2420_IOCFG0_FIFOP_POLARITY = 9, 
1295            CC2420_IOCFG0_SFD_POLARITY = 8, 
1296            CC2420_IOCFG0_CCA_POLARITY = 7, 
1297            CC2420_IOCFG0_FIFOP_THR = 0
1298          };
1299          
1300          enum cc2420_iocfg1_enums {
1301            CC2420_IOCFG1_HSSD_SRC = 10, 
1302            CC2420_IOCFG1_SFDMUX = 5, 
1303            CC2420_IOCFG1_CCAMUX = 0
1304          };
1305          
1306          enum cc2420_manfidl_enums {
1307            CC2420_MANFIDL_PARTNUM = 12, 
1308            CC2420_MANFIDL_MANFID = 0
1309          };
1310          
1311          enum cc2420_manfidh_enums {
1312            CC2420_MANFIDH_VERSION = 12, 
1313            CC2420_MANFIDH_PARTNUM = 0
1314          };
1315          
1316          enum cc2420_fsmtc_enums {
1317            CC2420_FSMTC_TC_RXCHAIN2RX = 13, 
1318            CC2420_FSMTC_TC_SWITCH2TX = 10, 
1319            CC2420_FSMTC_TC_PAON2TX = 6, 
1320            CC2420_FSMTC_TC_TXEND2SWITCH = 3, 
1321            CC2420_FSMTC_TC_TXEND2PAOFF = 0
1322          };
1323          
1324          enum cc2420_sfdmux_enums {
1325            CC2420_SFDMUX_SFD = 0, 
1326            CC2420_SFDMUX_XOSC16M_STABLE = 24
1327          };
1328          //# 10 "/opt/emdoor/tos/platforms/zigbem/platform_message.h"
1329          //#line 7
1330          typedef union message_header {
1331            cc2420_header_t cc2420;
1332          } 
1333          message_header_t;
1334          
1335          
1336          
1337          //#line 12
1338          typedef union TOSRadioFooter {
1339            cc2420_footer_t cc2420;
1340          } message_footer_t;
1341          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 23  

1342          
1343          
1344          //#line 16
1345          typedef union TOSRadioMeta_data {
1346            cc2420_meta_data_t cc2420;
1347          } message_meta_data_t;
1348          //# 19 "/opt/emdoor/tos/types/message.h"
1349          //#line 14
1350          typedef nx_struct message_t {
1351            nx_uint8_t header[sizeof(message_header_t )];
1352            nx_uint8_t _data[114];
1353            nx_uint8_t footer[sizeof(message_footer_t )];
1354            nx_uint8_t meta_data[sizeof(message_meta_data_t )];
1355          } /*__attribute__((packed))*/ message_t;
1356          //# 407 "/opt/emdoor/tos/chips/cc2430/ioCC2430.h"
1357          typedef message_t message_t_xdata_pm0;
1358          //#line 494
1359          enum __nesc_unnamed4260 {
1360            CC2430_RFPWR_ADI_RADIO_PD = 0x4, 
1361            CC2430_RFPWR_RREG_RADIO_PD = 0x3, 
1362            CC2430_RFPWR_RREG_DELAY = 0x0, 
1363            CC2430_RFPWR_RREG_DELAY_MASK = 0x7
1364          };
1365          
1366          enum __nesc_unnamed4261 {
1367            CC2430_RREG_DELAY_0 = 0x0, 
1368            CC2430_RREG_DELAY_31 = 0x1, 
1369            CC2430_RREG_DELAY_63 = 0x2, 
1370            CC2430_RREG_DELAY_125 = 0x3, 
1371            CC2430_RREG_DELAY_250 = 0x4, 
1372            CC2430_RREG_DELAY_500 = 0x5, 
1373            CC2430_RREG_DELAY_1000 = 0x6, 
1374            CC2430_RREG_DELAY_2000 = 0x7
1375          };
1376          
1377          enum __nesc_unnamed4262 {
1378            CC2430_MDMCTRL0L_AUTOCRC = 0x5, 
1379            CC2430_MDMCTRL0L_AUTOACK = 0x4
1380          };
1381          
1382          enum __nesc_unnamed4263 {
1383            CC2430_MDMCTRL0H_FRAME_FILT = 0x6, 
1384            CC2430_MDMCTRL0H_RESERVED_FRAME_MODE = 0x5, 
1385            CC2430_MDMCTRL0H_PAN_COORDINATOR = 0x4, 
1386            CC2430_MDMCTRL0H_ADDR_DECODE = 0x3, 
1387            CC2430_MDMCTRL0H_CCA_HYST = 0x0
1388          };
1389          
1390          enum __nesc_unnamed4264 {
1391            CC2430_RFSTATUS_TX_ACTIVE = 0x4, 
1392            CC2430_RFSTATUS_FIFO = 0x3, 
1393            CC2430_RFSTATUS_FIFOP = 0x2, 
1394            CC2430_RFSTATUS_SFD = 0x1, 
1395            CC2430_RFSTATUS_CCA = 0x0
1396          };
1397          //# 62 "/opt/emdoor/tos/chips/cc2430/mcs51/mcs51hardware.h"
1398          typedef uint8_t __nesc_atomic_t;
1399          
1400          static   /*inline*/   void __nesc_disable_interrupt(void);
1401          static   /*inline*/   void __nesc_enable_interrupt(void);
1402          
1403            /*inline*/   __nesc_atomic_t __nesc_atomic_start(void )  ;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 24  

1404          
1405          
1406          
1407          
1408          
1409            /*inline*/   void __nesc_atomic_end(__nesc_atomic_t oldSreg)  ;
1410          //# 66 "/opt/emdoor/tos/lib/zigbem/common/Emdebug.h"
1411          uint8_t current_task_id = 255;
1412          //# 39 "/opt/emdoor/tos/chips/cc2430/timer/CC2430Timer.h"
1413          enum __nesc_unnamed4265 {
1414            CC2430_SLEEP_OSC32K_CALDIS = 7, 
1415            CC2430_SLEEP_XOSC_STB = 6, 
1416            CC2430_SLEEP_HFRC_STB = 5, 
1417            CC2430_SLEEP_DIV = 3, 
1418            CC2430_SLEEP_OSC_PD = 2, 
1419            CC2430_SLEEP_MODE = 0, 
1420            CC2430_SLEEP_MODE_MASK = 3
1421          };
1422          
1423          enum __nesc_unnamed4266 {
1424            CC2430_SLEEP_POWERMODE_0 = 0, 
1425            CC2430_SLEEP_POWERMODE_1 = 1, 
1426            CC2430_SLEEP_POWERMODE_2 = 2, 
1427            CC2430_SLEEP_POWERMODE_3 = 3
1428          };
1429          
1430          enum __nesc_unnamed4267 {
1431            CC2430_CLKCON_OSC32K = 7, 
1432            CC2430_CLKCON_OSC = 6, 
1433            CC2430_CLKCON_TICKSPD = 3, 
1434            CC2430_CLKCON_CLKSPD = 0, 
1435            CC2430_CLKCON_TICKSPD_MASK = 0x38
1436          };
1437          
1438          
1439          
1440          
1441          enum cc2430_tick_spd_t {
1442            CC2430_TICKF_DIV_1 = 0x0 << CC2430_CLKCON_TICKSPD, 
1443            CC2430_TICKF_DIV_2 = 0x1 << CC2430_CLKCON_TICKSPD, 
1444            CC2430_TICKF_DIV_4 = 0x2 << CC2430_CLKCON_TICKSPD, 
1445            CC2430_TICKF_DIV_8 = 0x3 << CC2430_CLKCON_TICKSPD, 
1446            CC2430_TICKF_DIV_16 = 0x4 << CC2430_CLKCON_TICKSPD, 
1447            CC2430_TICKF_DIV_32 = 0x5 << CC2430_CLKCON_TICKSPD, 
1448            CC2430_TICKF_DIV_64 = 0x6 << CC2430_CLKCON_TICKSPD, 
1449            CC2430_TICKF_DIV_128 = 0x7 << CC2430_CLKCON_TICKSPD
1450          };
1451          
1452          
1453          
1454          
1455          
1456          
1457          
1458          
1459          
1460          
1461          enum __nesc_unnamed4268 {
1462            CC2430_T1CTL_CH2IF = 0x7, 
1463            CC2430_T1CTL_CH1IF = 0x6, 
1464            CC2430_T1CTL_CH0IF = 0x5, 
1465            CC2430_T1CTL_OVFIF = 0x4, 
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 25  

1466            CC2430_T1CTL_DIV = 0x2, 
1467            CC2430_T1CTL_MODE = 0x0, 
1468            CC2430_T1CTL_MODE_MASK = 0x3, 
1469            CC2430_T1CTL_DIV_MASK = 0xc, 
1470            CC2430_T1CTL_IF_MASK = 0xf0
1471          };
1472          
1473          
1474          
1475          
1476          
1477          
1478          enum cc2430_timer1_mode_t {
1479            CC2430_TIMER1_MODE_OFF = 0x0 << CC2430_T1CTL_MODE, 
1480            CC2430_TIMER1_MODE_FREE = 0x1 << CC2430_T1CTL_MODE, 
1481            CC2430_TIMER1_MODE_MODULO = 0x2 << CC2430_T1CTL_MODE, 
1482            CC2430_TIMER1_MODE_UPDOWN = 0x3 << CC2430_T1CTL_MODE
1483          };
1484          
1485          
1486          
1487          
1488          
1489          
1490          enum cc2430_timer1_if_t {
1491            CC2430_T1_CH2IF = 1 << CC2430_T1CTL_CH2IF, 
1492            CC2430_T1_CH1IF = 1 << CC2430_T1CTL_CH1IF, 
1493            CC2430_T1_CH0IF = 1 << CC2430_T1CTL_CH0IF, 
1494            CC2430_T1_OVFIF = 1 << CC2430_T1CTL_OVFIF
1495          };
1496          
1497          
1498          
1499          
1500          
1501          enum cc2430_timer1_prescaler_t {
1502            CC2430_TIMER1_DIV_1 = 0x0 << CC2430_T1CTL_DIV, 
1503            CC2430_TIMER1_DIV_8 = 0x1 << CC2430_T1CTL_DIV, 
1504            CC2430_TIMER1_DIV_32 = 0x2 << CC2430_T1CTL_DIV, 
1505            CC2430_TIMER1_DIV_128 = 0x3 << CC2430_T1CTL_DIV
1506          };
1507          
1508          
1509          
1510          
1511          
1512          enum __nesc_unnamed4269 {
1513            CC2430_T1CCTLx_CPSEL = 0x7, 
1514            CC2430_T1CCTLx_IM = 0x6, 
1515            CC2430_T1CCTLx_CMP = 0x3, 
1516            CC2430_T1CCTLx_MODE = 0x2, 
1517            CC2430_T1CCTLx_CAP = 0x0
1518          };
1519          
1520          
1521          
1522          
1523          
1524          
1525          
1526          
1527          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 26  

1528          
1529          enum cc2430_timerMAC_mode_t {
1530            CC2430_TIMERMAC_MODE_IDLE = 0x0, 
1531            CC2430_TIMERMAC_MODE_RUN = 0x1
1532          };
1533          
1534          
1535          
1536          
1537          
1538          enum cc2430_timerMAC_T2CNF_t {
1539            CC2430_T2CNF_CMPIF = 0x7, 
1540            CC2430_T2CNF_PERIF = 0x6, 
1541            CC2430_T2CNF_OFCMPIF = 0x5, 
1542            CC2430_T2CNF_CMSEL = 0x3, 
1543            CC2430_T2CNF_SYNC = 0x1, 
1544            CC2430_T2CNF_RUN = 0x0
1545          };
1546          
1547          
1548          
1549          
1550          
1551          
1552          enum cc2430_timerMAC_T2PEROF2_t {
1553            CC2430_T2PEROF2_CMPIM = 0x7, 
1554            CC2430_T2PEROF2_PERIM = 0x6, 
1555            CC2430_T2PEROF2_OFCMPIM = 0x5
1556          };
1557          
1558          enum cc2430_timerMAC_if_t {
1559            CC2430_TMAC_CMPIF = 1 << CC2430_T2CNF_CMPIF, 
1560            CC2430_TMAC_PERIF = 1 << CC2430_T2CNF_PERIF, 
1561            CC2430_TMAC_OFCMPIF = 1 << CC2430_T2CNF_OFCMPIF
1562          };
1563          
1564          enum cc2430_timerMAC_interval_t {
1565            CC2430_TIMERWDT_32768 = 0, 
1566            CC2430_TIMERWDT_8192 = 1, 
1567            CC2430_TIMERWDT_512 = 2, 
1568            CC2430_TIMERWDT_64 = 3
1569          };
1570          //#line 208
1571          enum __nesc_unnamed4270 {
1572            CC2430_TIMIF_OVFIM = 0x6
1573          };
1574          
1575          enum cc2430_timer34_if_t {
1576            CC2430_TIMIF_T4CH1IF = 0x5, 
1577            CC2430_TIMIF_T4CH0IF = 0x4, 
1578            CC2430_TIMIF_T4OVFIF = 0x3, 
1579            CC2430_TIMIF_T3CH1IF = 0x2, 
1580            CC2430_TIMIF_T3CH0IF = 0x1, 
1581            CC2430_TIMIF_T3OVFIF = 0x0
1582          };
1583          
1584          
1585          
1586          
1587          
1588          
1589          enum cc2430_timer3_4_mode_t {
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 27  

1590            CC2430_TIMER3_4_MODE_FREE = 0x0, 
1591            CC2430_TIMER3_4_MODE_DOWN = 0x1, 
1592            CC2430_TIMER3_4_MODE_MODULO = 0x2, 
1593            CC2430_TIMER3_4_MODE_UPDOWN = 0x3
1594          };
1595          
1596          
1597          
1598          
1599          
1600          enum __nesc_unnamed4271 {
1601            CC2430_T34CTL_DIV = 0x5, 
1602            CC2430_T34CTL_START = 0x4, 
1603            CC2430_T34CTL_OVFIM = 0x3, 
1604            CC2430_T34CTL_WDTIF = 0x3, 
1605            CC2430_T34CTL_CLR = 0x2, 
1606            CC2430_T34CTL_MODE = 0x0, 
1607            CC2430_T34CTL_MODE_MASK = 0x3, 
1608            CC2430_T34CTL_DIV_MASK = 0xe0
1609          };
1610          
1611          
1612          
1613          
1614          
1615          enum cc2430_timer3_4_prescaler_t {
1616            CC2430_TIMER3_4_DIV_1 = 0x0 << CC2430_T34CTL_DIV, 
1617            CC2430_TIMER3_4_DIV_2 = 0x1 << CC2430_T34CTL_DIV, 
1618            CC2430_TIMER3_4_DIV_4 = 0x2 << CC2430_T34CTL_DIV, 
1619            CC2430_TIMER3_4_DIV_8 = 0x3 << CC2430_T34CTL_DIV, 
1620            CC2430_TIMER3_4_DIV_16 = 0x4 << CC2430_T34CTL_DIV, 
1621            CC2430_TIMER3_4_DIV_32 = 0x5 << CC2430_T34CTL_DIV, 
1622            CC2430_TIMER3_4_DIV_64 = 0x6 << CC2430_T34CTL_DIV, 
1623            CC2430_TIMER3_4_DIV_128 = 0x7 << CC2430_T34CTL_DIV
1624          };
1625          
1626          
1627          
1628          
1629          
1630          
1631          
1632          
1633          
1634          
1635          enum __nesc_unnamed4272 {
1636            CC2430_WDCTL_CLR = 0x4, 
1637            CC2430_WDCTL_EN = 0x3, 
1638            CC2430_WDCTL_MODE = 0x2, 
1639            CC2430_WDCTL_INT = 0x0, 
1640            CC2430_WDCTL_INT_MASK = 0x3
1641          };
1642          
1643          enum cc2430_timerWDT_mode_t {
1644            CC2430_TIMERWDT_MODE_WDT = 0x0 << CC2430_WDCTL_MODE, 
1645            CC2430_TIMERWDT_MODE_TIMER = 0x1 << CC2430_WDCTL_MODE
1646          };
1647          //# 7 "/opt/emdoor/tos/chips/cc2430/Timer.h"
1648          typedef uint8_t TMilli;
1649          typedef uint8_t T32khz;
1650          typedef uint8_t TMicro;
1651          //# 49 "/opt/emdoor/tos/interfaces/Boot.nc"
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 28  

1652          static  void BlinkM__Boot__booted(void);
1653          //# 64 "/opt/emdoor/tos/interfaces/TaskBasic.nc"
1654          static  void BlinkM__DemoLed__runTask(void);
1655          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
1656          static  error_t LedsP__Init__init(void);
1657          //# 11 "/opt/emdoor/tos/interfaces/Leds.nc"
1658          static   void LedsP__Leds__RedLedOff(void);
1659          //#line 57
1660          static   void LedsP__Leds__GreenLedOn(void);
1661          //#line 43
1662          static   void LedsP__Leds__YellowLedOff(void);
1663          //#line 62
1664          static   void LedsP__Leds__GreenLedOff(void);
1665          //#line 6
1666          static   void LedsP__Leds__RedLedOn(void);
1667          //#line 27
1668          static   void LedsP__Leds__BlueLedOff(void);
1669          //#line 22
1670          static   void LedsP__Leds__BlueLedOn(void);
1671          //#line 38
1672          static   void LedsP__Leds__YellowLedOn(void);
1673          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
1674          static   void HplCC2430GeneralIOC__P01__makeOutput(void);
1675          //#line 29
1676          static   void HplCC2430GeneralIOC__P01__set(void);
1677          static   void HplCC2430GeneralIOC__P01__clr(void);
1678          
1679          
1680          
1681          
1682          static   void HplCC2430GeneralIOC__P13__makeOutput(void);
1683          //#line 29
1684          static   void HplCC2430GeneralIOC__P13__set(void);
1685          static   void HplCC2430GeneralIOC__P13__clr(void);
1686          
1687          
1688          
1689          
1690          static   void HplCC2430GeneralIOC__P11__makeOutput(void);
1691          //#line 29
1692          static   void HplCC2430GeneralIOC__P11__set(void);
1693          static   void HplCC2430GeneralIOC__P11__clr(void);
1694          
1695          
1696          
1697          
1698          static   void HplCC2430GeneralIOC__P14__makeOutput(void);
1699          //#line 29
1700          static   void HplCC2430GeneralIOC__P14__set(void);
1701          static   void HplCC2430GeneralIOC__P14__clr(void);
1702          
1703          
1704          
1705          
1706          static   void HplCC2430GeneralIOC__P12__makeOutput(void);
1707          //#line 29
1708          static   void HplCC2430GeneralIOC__P12__set(void);
1709          static   void HplCC2430GeneralIOC__P12__clr(void);
1710          
1711          
1712          
1713          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 29  

1714          static   void HplCC2430GeneralIOC__P10__makeOutput(void);
1715          //#line 29
1716          static   void HplCC2430GeneralIOC__P10__set(void);
1717          static   void HplCC2430GeneralIOC__P10__clr(void);
1718          
1719          
1720          
1721          
1722          static   void HplCC2430GeneralIOC__P20__makeOutput(void);
1723          //#line 29
1724          static   void HplCC2430GeneralIOC__P20__set(void);
1725          static   void HplCC2430GeneralIOC__P20__clr(void);
1726          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
1727          static  error_t PlatformP__Init__init(void);
1728          //# 58 "/opt/emdoor/tos/interfaces/ActiveMessageAddress.nc"
1729          static   void FlashIEEEP__ActiveMessageAddress__changed(void);
1730          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
1731          static  error_t FlashIEEEP__Init__init(void);
1732          //# 5 "/opt/emdoor/tos/platforms/zigbem/FlashIEEE.nc"
1733          static  uint16_t FlashIEEEP__FlashIEEE__GetShortAddress(void);
1734          
1735          
1736          static  void FlashIEEEP__FlashIEEE__WriteToAM(void);
1737          //#line 4
1738          static  uint16_t FlashIEEEP__FlashIEEE__GetPANID(void);
1739          
1740          
1741          static  void FlashIEEEP__FlashIEEE__WriteToRegister(void);
1742          //# 43 "/opt/emdoor/tos/interfaces/ActiveMessageAddress.nc"
1743          static   void ActiveMessageAddressC__ActiveMessageAddress__setAddress(am_group_t arg_0x7e9c3f10, am_addr_t
             - arg_0x7e9b60b0);
1744          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
1745          static  error_t RealMainP__SoftwareInit__default__init(void);
1746          //# 56 "/opt/emdoor/tos/interfaces/TaskBasic.nc"
1747          static   error_t SchedulerBasicP__TaskBasic__postTask(
1748          //# 45 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
1749          uint8_t arg_0x7ed54e00);
1750          //# 64 "/opt/emdoor/tos/interfaces/TaskBasic.nc"
1751          static  void SchedulerBasicP__TaskBasic__default__runTask(
1752          //# 45 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
1753          uint8_t arg_0x7ed54e00);
1754          //# 46 "/opt/emdoor/tos/interfaces/Scheduler.nc"
1755          static  void SchedulerBasicP__Scheduler__init(void);
1756          //#line 61
1757          static  void SchedulerBasicP__Scheduler__taskLoop(void);
1758          //#line 54
1759          static  bool SchedulerBasicP__Scheduler__runNextTask(void);
1760          //# 59 "/opt/emdoor/tos/interfaces/McuSleep.nc"
1761          static   void McuSleepP__McuSleep__sleep(void);
1762          //# 7 "/opt/emdoor/tos/lib/zigbem/power/McuSleepControl.nc"
1763          static  void McuSleepP__McuSleepControl__default__beforeSleep(void);
1764          
1765          static  void McuSleepP__McuSleepControl__default__afterWakeup(void);
1766          //# 3 "/opt/emdoor/tos/lib/zigbem/power/McuSleepLockMan.nc"
1767          static  bool /*McuSleepLockManC.McuSleepLockManP*/McuSleepLockManP__0__McuSleepLockMan__isLocked(void);
1768          //# 11 "/opt/emdoor/tos/interfaces/Leds.nc"
1769          static   void BlinkM__Leds__RedLedOff(void);
1770          //#line 57
1771          static   void BlinkM__Leds__GreenLedOn(void);
1772          //#line 43
1773          static   void BlinkM__Leds__YellowLedOff(void);
1774          //#line 62
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 30  

1775          static   void BlinkM__Leds__GreenLedOff(void);
1776          //#line 6
1777          static   void BlinkM__Leds__RedLedOn(void);
1778          //#line 27
1779          static   void BlinkM__Leds__BlueLedOff(void);
1780          //#line 22
1781          static   void BlinkM__Leds__BlueLedOn(void);
1782          //#line 38
1783          static   void BlinkM__Leds__YellowLedOn(void);
1784          //# 56 "/opt/emdoor/tos/interfaces/TaskBasic.nc"
1785          static   error_t BlinkM__DemoLed__postTask(void);
1786          //# 13 "BlinkM.nc"
1787          enum BlinkM____nesc_unnamed4273 {
1788          //#line 13
1789            BlinkM__DemoLed = 0U
1790          };
1791          //#line 13
1792          typedef int BlinkM____nesc_sillytask_DemoLed[];
1793          //#line 13
1794          static  void BlinkM__DemoLed__runTask(void);
1795          //#line 38
1796          static  /*inline*/   void BlinkM__Boot__booted(void);
1797          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
1798          static   void LedsP__BoardYellowLed__makeOutput(void);
1799          //#line 29
1800          static   void LedsP__BoardYellowLed__set(void);
1801          static   void LedsP__BoardYellowLed__clr(void);
1802          
1803          
1804          
1805          
1806          static   void LedsP__BlueLed__makeOutput(void);
1807          //#line 29
1808          static   void LedsP__BlueLed__set(void);
1809          static   void LedsP__BlueLed__clr(void);
1810          
1811          
1812          
1813          
1814          static   void LedsP__RedLed__makeOutput(void);
1815          //#line 29
1816          static   void LedsP__RedLed__set(void);
1817          static   void LedsP__RedLed__clr(void);
1818          
1819          
1820          
1821          
1822          static   void LedsP__BoardBlueLed__makeOutput(void);
1823          //#line 29
1824          static   void LedsP__BoardBlueLed__set(void);
1825          static   void LedsP__BoardBlueLed__clr(void);
1826          
1827          
1828          
1829          
1830          static   void LedsP__YellowLed__makeOutput(void);
1831          //#line 29
1832          static   void LedsP__YellowLed__set(void);
1833          static   void LedsP__YellowLed__clr(void);
1834          
1835          
1836          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 31  

1837          
1838          static   void LedsP__BoardGreenLed__makeOutput(void);
1839          //#line 29
1840          static   void LedsP__BoardGreenLed__set(void);
1841          static   void LedsP__BoardGreenLed__clr(void);
1842          
1843          
1844          
1845          
1846          static   void LedsP__BoardRedLed__makeOutput(void);
1847          //#line 29
1848          static   void LedsP__BoardRedLed__set(void);
1849          static   void LedsP__BoardRedLed__clr(void);
1850          //# 27 "/opt/emdoor/tos/system/LedsP.nc"
1851          static  /*inline*/   error_t LedsP__Init__init(void);
1852          //#line 49
1853          static  /*inline*/    void LedsP__Leds__RedLedOn(void);
1854          
1855          
1856          
1857          
1858          
1859          
1860          static  /*inline*/    void LedsP__Leds__RedLedOff(void);
1861          //#line 70
1862          static  /*inline*/    void LedsP__Leds__BlueLedOn(void);
1863          
1864          
1865          
1866          
1867          
1868          
1869          static  /*inline*/    void LedsP__Leds__BlueLedOff(void);
1870          //#line 91
1871          static  /*inline*/    void LedsP__Leds__YellowLedOn(void);
1872          
1873          
1874          
1875          
1876          
1877          
1878          static  /*inline*/    void LedsP__Leds__YellowLedOff(void);
1879          //#line 114
1880          static  /*inline*/    void LedsP__Leds__GreenLedOn(void);
1881          
1882          
1883          
1884          static  /*inline*/    void LedsP__Leds__GreenLedOff(void);
1885          //# 94 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
1886          static   /*inline*/     void HplCC2430GeneralIOC__P01__set(void);
1887          //#line 94
1888          static   /*inline*/     void HplCC2430GeneralIOC__P01__clr(void);
1889          //#line 94
1890          static   /*inline*/     void HplCC2430GeneralIOC__P01__makeOutput(void);
1891          
1892          
1893          
1894          
1895          
1896          
1897          
1898          static   /*inline*/     void HplCC2430GeneralIOC__P10__set(void);
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 32  

1899          //#line 102
1900          static   /*inline*/     void HplCC2430GeneralIOC__P10__clr(void);
1901          //#line 102
1902          static   /*inline*/     void HplCC2430GeneralIOC__P10__makeOutput(void);
1903          static   /*inline*/     void HplCC2430GeneralIOC__P11__set(void);
1904          //#line 103
1905          static   /*inline*/     void HplCC2430GeneralIOC__P11__clr(void);
1906          //#line 103
1907          static   /*inline*/     void HplCC2430GeneralIOC__P11__makeOutput(void);
1908          static   /*inline*/     void HplCC2430GeneralIOC__P12__set(void);
1909          //#line 104
1910          static   /*inline*/     void HplCC2430GeneralIOC__P12__clr(void);
1911          //#line 104
1912          static   /*inline*/     void HplCC2430GeneralIOC__P12__makeOutput(void);
1913          static   /*inline*/     void HplCC2430GeneralIOC__P13__set(void);
1914          //#line 105
1915          static   /*inline*/     void HplCC2430GeneralIOC__P13__clr(void);
1916          //#line 105
1917          static   /*inline*/     void HplCC2430GeneralIOC__P13__makeOutput(void);
1918          static   /*inline*/     void HplCC2430GeneralIOC__P14__set(void);
1919          //#line 106
1920          static   /*inline*/     void HplCC2430GeneralIOC__P14__clr(void);
1921          //#line 106
1922          static   /*inline*/     void HplCC2430GeneralIOC__P14__makeOutput(void);
1923          
1924          
1925          
1926          
1927          static   /*inline*/     void HplCC2430GeneralIOC__P20__set(void);
1928          //#line 111
1929          static   /*inline*/     void HplCC2430GeneralIOC__P20__clr(void);
1930          //#line 111
1931          static   /*inline*/     void HplCC2430GeneralIOC__P20__makeOutput(void);
1932          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
1933          static  error_t PlatformP__FlashIEEEInit__init(void);
1934          //#line 51
1935          static  error_t PlatformP__LedsInit__init(void);
1936          //# 8 "/opt/emdoor/tos/platforms/zigbem/FlashIEEE.nc"
1937          static  void PlatformP__FlashIEEE__WriteToAM(void);
1938          //#line 7
1939          static  void PlatformP__FlashIEEE__WriteToRegister(void);
1940          //# 19 "/opt/emdoor/tos/platforms/zigbem/PlatformP.nc"
1941          static  /*inline*/   error_t PlatformP__Init__init(void);
1942          //# 43 "/opt/emdoor/tos/interfaces/ActiveMessageAddress.nc"
1943          static   void FlashIEEEP__ActiveMessageAddress__setAddress(am_group_t arg_0x7e9c3f10, am_addr_t arg_0x7e9b
             -60b0);
1944          //# 17 "/opt/emdoor/tos/platforms/zigbem/FlashIEEEP.nc"
1945          uint8_t FlashIEEEP__m_ieee[8];
1946          
1947          static  /*inline*/   error_t FlashIEEEP__Init__init(void);
1948          //#line 53
1949          static  uint16_t FlashIEEEP__FlashIEEE__GetPANID(void);
1950          
1951          
1952          
1953          
1954          
1955          static  uint16_t FlashIEEEP__FlashIEEE__GetShortAddress(void);
1956          
1957          
1958          
1959          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 33  

1960          
1961          
1962          
1963          
1964          
1965          
1966          static  /*inline*/   void FlashIEEEP__FlashIEEE__WriteToRegister(void);
1967          //#line 89
1968          static  /*inline*/   void FlashIEEEP__FlashIEEE__WriteToAM(void);
1969          
1970          
1971          
1972          
1973          
1974          
1975          
1976          
1977          
1978          
1979          static  /*inline*/    void FlashIEEEP__ActiveMessageAddress__changed(void);
1980          //# 58 "/opt/emdoor/tos/interfaces/ActiveMessageAddress.nc"
1981          static   void ActiveMessageAddressC__ActiveMessageAddress__changed(void);
1982          //# 51 "/opt/emdoor/tos/system/ActiveMessageAddressC.nc"
1983          am_addr_t ActiveMessageAddressC__addr = TOS_AM_ADDRESS;
1984          
1985          
1986          am_group_t ActiveMessageAddressC__group = TOS_AM_GROUP;
1987          //#line 70
1988          static  /*inline*/    void ActiveMessageAddressC__ActiveMessageAddress__setAddress(am_group_t myGroup, am_
             -addr_t myAddr);
1989          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
1990          static  error_t RealMainP__SoftwareInit__init(void);
1991          //# 49 "/opt/emdoor/tos/interfaces/Boot.nc"
1992          static  void RealMainP__Boot__booted(void);
1993          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
1994          static  error_t RealMainP__PlatformInit__init(void);
1995          //# 46 "/opt/emdoor/tos/interfaces/Scheduler.nc"
1996          static  void RealMainP__Scheduler__init(void);
1997          //#line 61
1998          static  void RealMainP__Scheduler__taskLoop(void);
1999          //#line 54
2000          static  bool RealMainP__Scheduler__runNextTask(void);
2001          //# 52 "/opt/emdoor/tos/system/RealMainP.nc"
2002          int main(void)   ;
2003          //#line 94
2004          static  /*inline*/    error_t RealMainP__SoftwareInit__default__init(void);
2005          //# 64 "/opt/emdoor/tos/interfaces/TaskBasic.nc"
2006          static  void SchedulerBasicP__TaskBasic__runTask(
2007          //# 45 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
2008          uint8_t arg_0x7ed54e00);
2009          //# 59 "/opt/emdoor/tos/interfaces/McuSleep.nc"
2010          static   void SchedulerBasicP__McuSleep__sleep(void);
2011          //# 50 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
2012          enum SchedulerBasicP____nesc_unnamed4274 {
2013          
2014            SchedulerBasicP__NUM_TASKS = 1U, 
2015            SchedulerBasicP__NO_TASK = 255
2016          };
2017          
2018          volatile uint8_t SchedulerBasicP__m_head;
2019          volatile uint8_t SchedulerBasicP__m_tail;
2020          volatile uint8_t SchedulerBasicP__m_next[SchedulerBasicP__NUM_TASKS];
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 34  

2021          
2022          
2023          
2024          
2025          
2026          
2027          
2028          
2029          static   /*inline*/   uint8_t SchedulerBasicP__popTask(void);
2030          //#line 86
2031          static  /*inline*/  bool SchedulerBasicP__isWaiting(uint8_t id);
2032          
2033          
2034          
2035          
2036          static  /*inline*/  bool SchedulerBasicP__pushTask(uint8_t id);
2037          //#line 113
2038          static  /*inline*/   void SchedulerBasicP__Scheduler__init(void);
2039          
2040          
2041          
2042          
2043          
2044          
2045          
2046          
2047          
2048          static  bool SchedulerBasicP__Scheduler__runNextTask(void);
2049          //#line 139
2050          static  /*inline*/   void SchedulerBasicP__Scheduler__taskLoop(void);
2051          //#line 174
2052          static  /*inline*/    error_t SchedulerBasicP__TaskBasic__postTask(uint8_t id);
2053          
2054          
2055          
2056          
2057          static  /*inline*/    void SchedulerBasicP__TaskBasic__default__runTask(uint8_t id);
2058          //# 3 "/opt/emdoor/tos/lib/zigbem/power/McuSleepLockMan.nc"
2059          static  bool McuSleepP__McuSleepLockMan__isLocked(void);
2060          //# 7 "/opt/emdoor/tos/lib/zigbem/power/McuSleepControl.nc"
2061          static  void McuSleepP__McuSleepControl__beforeSleep(void);
2062          
2063          static  void McuSleepP__McuSleepControl__afterWakeup(void);
2064          //# 13 "/opt/emdoor/tos/lib/zigbem/power/McuSleepP.nc"
2065          bool McuSleepP__m_need_sleep = FALSE;
2066          //#line 27
2067          static  /*inline*/    void McuSleepP__McuSleep__sleep(void);
2068          //#line 54
2069          static  /*inline*/    void McuSleepP__McuSleepControl__default__beforeSleep(void);
2070          
2071          
2072          static  /*inline*/    void McuSleepP__McuSleepControl__default__afterWakeup(void);
2073          //# 9 "/opt/emdoor/tos/lib/zigbem/power/McuSleepLockManP.nc"
2074           uint32_t /*McuSleepLockManC.McuSleepLockManP*/McuSleepLockManP__0__lock_bitmap = 0x00000000;
2075          //#line 37
2076          static  /*inline*/   bool /*McuSleepLockManC.McuSleepLockManP*/McuSleepLockManP__0__McuSleepLockMan__isLoc
             -ked(void);
2077          //# 67 "/opt/emdoor/tos/chips/cc2430/mcs51/mcs51hardware.h"
2078             /*inline*/   __nesc_atomic_t __nesc_atomic_start(void )
2079          //#line 67
2080          {
2081   1        __nesc_atomic_t tmp = EA;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 35  

2082   1      
2083   1      //#line 69
2084   1        EA = 0;
2085   1        return tmp;
2086   1      }
2087          
2088             /*inline*/   void __nesc_atomic_end(__nesc_atomic_t oldSreg)
2089          //#line 73
2090          {
2091   1        EA = oldSreg;
2092   1      }
2093          
2094          //# 113 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
2095          static  /*inline*/   void SchedulerBasicP__Scheduler__init(void)
2096          {
2097   1        /* atomic removed: atomic calls only */
2098   1        {
2099   2          memset((void *)SchedulerBasicP__m_next, SchedulerBasicP__NO_TASK, sizeof SchedulerBasicP__m_next);
2100   2          SchedulerBasicP__m_head = SchedulerBasicP__NO_TASK;
2101   2          SchedulerBasicP__m_tail = SchedulerBasicP__NO_TASK;
2102   2        }
2103   1      }
2104          
2105          //# 46 "/opt/emdoor/tos/interfaces/Scheduler.nc"
2106          #define RealMainP__Scheduler__init(void) SchedulerBasicP__Scheduler__init()
2107          //# 100 "/opt/emdoor/tos/platforms/zigbem/FlashIEEEP.nc"
2108          static  /*inline*/    void FlashIEEEP__ActiveMessageAddress__changed(void)
2109          {
2110   1      }
2111          
2112          //# 58 "/opt/emdoor/tos/interfaces/ActiveMessageAddress.nc"
2113          #define ActiveMessageAddressC__ActiveMessageAddress__changed(void) FlashIEEEP__ActiveMessageAddress__chang
             -ed()
2114          //# 70 "/opt/emdoor/tos/system/ActiveMessageAddressC.nc"
2115          static  /*inline*/    void ActiveMessageAddressC__ActiveMessageAddress__setAddress(am_group_t myGroup, am_
             -addr_t myAddr)
2116          //#line 70
2117          {
2118   1        /* atomic removed: atomic calls only */
2119   1      //#line 71
2120   1        {
2121   2          ActiveMessageAddressC__addr = myAddr;
2122   2          ActiveMessageAddressC__group = myGroup;
2123   2        }
2124   1        ActiveMessageAddressC__ActiveMessageAddress__changed();
2125   1      }
2126          
2127          //# 43 "/opt/emdoor/tos/interfaces/ActiveMessageAddress.nc"
2128          #define FlashIEEEP__ActiveMessageAddress__setAddress(arg_0x7e9c3f10,arg_0x7e9b60b0) ActiveMessageAddressC_
             -_ActiveMessageAddress__setAddress(arg_0x7e9c3f10, arg_0x7e9b60b0)
2129          //# 89 "/opt/emdoor/tos/platforms/zigbem/FlashIEEEP.nc"
2130          static  /*inline*/   void FlashIEEEP__FlashIEEE__WriteToAM(void)
2131          {
2132   1        FlashIEEEP__ActiveMessageAddress__setAddress((uint8_t )(FlashIEEEP__FlashIEEE__GetPANID() & 0xFF), 
2133   1        FlashIEEEP__FlashIEEE__GetShortAddress());
2134   1      
2135   1        TOS_NODE_ID = FlashIEEEP__FlashIEEE__GetShortAddress();
2136   1      
2137   1        TOS_IEEE_SADDR = FlashIEEEP__FlashIEEE__GetShortAddress();
2138   1        TOS_IEEE_PANID = FlashIEEEP__FlashIEEE__GetPANID();
2139   1      }
2140          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 36  

2141          //# 8 "/opt/emdoor/tos/platforms/zigbem/FlashIEEE.nc"
2142          #define PlatformP__FlashIEEE__WriteToAM(void) FlashIEEEP__FlashIEEE__WriteToAM()
2143          //# 70 "/opt/emdoor/tos/platforms/zigbem/FlashIEEEP.nc"
2144          static  /*inline*/   void FlashIEEEP__FlashIEEE__WriteToRegister(void)
2145          {
2146   1        ;
2147   1      
2148   1      
2149   1        * (uint8_t xdata *)0xDF43 = FlashIEEEP__m_ieee[0];
2150   1        * (uint8_t xdata *)0xDF44 = FlashIEEEP__m_ieee[1];
2151   1        * (uint8_t xdata *)0xDF45 = FlashIEEEP__m_ieee[2];
2152   1        * (uint8_t xdata *)0xDF46 = FlashIEEEP__m_ieee[3];
2153   1        * (uint8_t xdata *)0xDF47 = FlashIEEEP__m_ieee[4];
2154   1        * (uint8_t xdata *)0xDF48 = FlashIEEEP__m_ieee[5];
2155   1        * (uint8_t xdata *)0xDF49 = FlashIEEEP__m_ieee[6];
2156   1        * (uint8_t xdata *)0xDF4A = FlashIEEEP__m_ieee[7];
2157   1      
2158   1      
2159   1        * (uint16_t xdata *)0xDF4B = FlashIEEEP__FlashIEEE__GetPANID();
2160   1        * (uint16_t xdata *)0xDF4D = FlashIEEEP__FlashIEEE__GetShortAddress();
2161   1      }
2162          
2163          //# 7 "/opt/emdoor/tos/platforms/zigbem/FlashIEEE.nc"
2164          #define PlatformP__FlashIEEE__WriteToRegister(void) FlashIEEEP__FlashIEEE__WriteToRegister()
2165          //# 19 "/opt/emdoor/tos/platforms/zigbem/FlashIEEEP.nc"
2166          static  /*inline*/   error_t FlashIEEEP__Init__init(void)
2167          {
2168   1        uint8_t i;
2169   1        uint16_t old_code_map;
2170   1      
2171   1        /* atomic removed: atomic calls only */
2172   1      //#line 24
2173   1        {
2174   2          ;
2175   2      
2176   2          {
2177   3      //#line 27
2178   3            old_code_map = MEMCTR;
2179   3          }
2180   2      //#line 27
2181   2          ;
2182   2          {
2183   3      //#line 28
2184   3            MEMCTR = (MEMCTR & 0xCF) | (3 << 4);
2185   3          }
2186   2      //#line 28
2187   2          ;
2188   2      
2189   2          FlashIEEEP__m_ieee[0] = * (uint8_t code *)(0xFFF8 + 7);
2190   2          FlashIEEEP__m_ieee[1] = * (uint8_t code *)(0xFFF8 + 6);
2191   2          FlashIEEEP__m_ieee[2] = * (uint8_t code *)(0xFFF8 + 5);
2192   2          FlashIEEEP__m_ieee[3] = * (uint8_t code *)(0xFFF8 + 4);
2193   2          FlashIEEEP__m_ieee[4] = * (uint8_t code *)(0xFFF8 + 3);
2194   2          FlashIEEEP__m_ieee[5] = * (uint8_t code *)(0xFFF8 + 2);
2195   2          FlashIEEEP__m_ieee[6] = * (uint8_t code *)(0xFFF8 + 1);
2196   2          FlashIEEEP__m_ieee[7] = * (uint8_t code *)(0xFFF8 + 0);
2197   2      
2198   2          for (i = 0; i < 8; ++i) 
2199   2            {
2200   3              ;
2201   3            }
2202   2      
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 37  

2203   2      
2204   2          ;
2205   2      
2206   2          {
2207   3      //#line 47
2208   3            MEMCTR = old_code_map;
2209   3          }
2210   2      //#line 47
2211   2          ;
2212   2        }
2213   1      
2214   1        return SUCCESS;
2215   1      }
2216          
2217          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
2218          #define PlatformP__FlashIEEEInit__init(void) FlashIEEEP__Init__init()
2219          //# 106 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2220          static   /*inline*/     void HplCC2430GeneralIOC__P14__set(void)
2221          //#line 106
2222          {
2223   1      //#line 106
2224   1        P1_4 = 1;
2225   1      }
2226          
2227          //# 29 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2228          #define LedsP__BoardYellowLed__set(void) HplCC2430GeneralIOC__P14__set()
2229          //# 102 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2230          static   /*inline*/     void HplCC2430GeneralIOC__P10__set(void)
2231          //#line 102
2232          {
2233   1      //#line 102
2234   1        P1_0 = 1;
2235   1      }
2236          
2237          //# 29 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2238          #define LedsP__BoardGreenLed__set(void) HplCC2430GeneralIOC__P10__set()
2239          //# 103 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2240          static   /*inline*/     void HplCC2430GeneralIOC__P11__set(void)
2241          //#line 103
2242          {
2243   1      //#line 103
2244   1        P1_1 = 1;
2245   1      }
2246          
2247          //# 29 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2248          #define LedsP__BoardBlueLed__set(void) HplCC2430GeneralIOC__P11__set()
2249          //# 94 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2250          static   /*inline*/     void HplCC2430GeneralIOC__P01__set(void)
2251          //#line 94
2252          {
2253   1      //#line 94
2254   1        P0_1 = 1;
2255   1      }
2256          
2257          //# 29 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2258          #define LedsP__BoardRedLed__set(void) HplCC2430GeneralIOC__P01__set()
2259          //# 106 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2260          static   /*inline*/     void HplCC2430GeneralIOC__P14__makeOutput(void)
2261          //#line 106
2262          {
2263   1      //#line 106
2264   1        P1_DIR |= 1 << 4;
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 38  

2265   1      }
2266          
2267          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2268          #define LedsP__BoardYellowLed__makeOutput(void) HplCC2430GeneralIOC__P14__makeOutput()
2269          //# 102 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2270          static   /*inline*/     void HplCC2430GeneralIOC__P10__makeOutput(void)
2271          //#line 102
2272          {
2273   1      //#line 102
2274   1        P1_DIR |= 1 << 0;
2275   1      }
2276          
2277          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2278          #define LedsP__BoardGreenLed__makeOutput(void) HplCC2430GeneralIOC__P10__makeOutput()
2279          //# 103 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2280          static   /*inline*/     void HplCC2430GeneralIOC__P11__makeOutput(void)
2281          //#line 103
2282          {
2283   1      //#line 103
2284   1        P1_DIR |= 1 << 1;
2285   1      }
2286          
2287          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2288          #define LedsP__BoardBlueLed__makeOutput(void) HplCC2430GeneralIOC__P11__makeOutput()
2289          //# 94 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2290          static   /*inline*/     void HplCC2430GeneralIOC__P01__makeOutput(void)
2291          //#line 94
2292          {
2293   1      //#line 94
2294   1        P0_DIR |= 1 << 1;
2295   1      }
2296          
2297          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2298          #define LedsP__BoardRedLed__makeOutput(void) HplCC2430GeneralIOC__P01__makeOutput()
2299          //# 111 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2300          static   /*inline*/     void HplCC2430GeneralIOC__P20__set(void)
2301          //#line 111
2302          {
2303   1      //#line 111
2304   1        P2_0 = 1;
2305   1      }
2306          
2307          //# 29 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2308          #define LedsP__YellowLed__set(void) HplCC2430GeneralIOC__P20__set()
2309          //# 104 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2310          static   /*inline*/     void HplCC2430GeneralIOC__P12__set(void)
2311          //#line 104
2312          {
2313   1      //#line 104
2314   1        P1_2 = 1;
2315   1      }
2316          
2317          //# 29 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2318          #define LedsP__BlueLed__set(void) HplCC2430GeneralIOC__P12__set()
2319          //# 105 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2320          static   /*inline*/     void HplCC2430GeneralIOC__P13__set(void)
2321          //#line 105
2322          {
2323   1      //#line 105
2324   1        P1_3 = 1;
2325   1      }
2326          
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 39  

2327          //# 29 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2328          #define LedsP__RedLed__set(void) HplCC2430GeneralIOC__P13__set()
2329          //# 111 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2330          static   /*inline*/     void HplCC2430GeneralIOC__P20__makeOutput(void)
2331          //#line 111
2332          {
2333   1      //#line 111
2334   1        P2_DIR |= 1 << 0;
2335   1      }
2336          
2337          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2338          #define LedsP__YellowLed__makeOutput(void) HplCC2430GeneralIOC__P20__makeOutput()
2339          //# 104 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2340          static   /*inline*/     void HplCC2430GeneralIOC__P12__makeOutput(void)
2341          //#line 104
2342          {
2343   1      //#line 104
2344   1        P1_DIR |= 1 << 2;
2345   1      }
2346          
2347          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2348          #define LedsP__BlueLed__makeOutput(void) HplCC2430GeneralIOC__P12__makeOutput()
2349          //# 105 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2350          static   /*inline*/     void HplCC2430GeneralIOC__P13__makeOutput(void)
2351          //#line 105
2352          {
2353   1      //#line 105
2354   1        P1_DIR |= 1 << 3;
2355   1      }
2356          
2357          //# 35 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2358          #define LedsP__RedLed__makeOutput(void) HplCC2430GeneralIOC__P13__makeOutput()
2359          //# 27 "/opt/emdoor/tos/system/LedsP.nc"
2360          static  /*inline*/   error_t LedsP__Init__init(void)
2361          //#line 27
2362          {
2363   1        /* atomic removed: atomic calls only */
2364   1      //#line 28
2365   1        {
2366   2          LedsP__RedLed__makeOutput();
2367   2          LedsP__BlueLed__makeOutput();
2368   2          LedsP__YellowLed__makeOutput();
2369   2          LedsP__RedLed__set();
2370   2          LedsP__BlueLed__set();
2371   2          LedsP__YellowLed__set();
2372   2      
2373   2          LedsP__BoardRedLed__makeOutput();
2374   2          LedsP__BoardBlueLed__makeOutput();
2375   2          LedsP__BoardGreenLed__makeOutput();
2376   2          LedsP__BoardYellowLed__makeOutput();
2377   2          LedsP__BoardRedLed__set();
2378   2          LedsP__BoardBlueLed__set();
2379   2          LedsP__BoardGreenLed__set();
2380   2          LedsP__BoardYellowLed__set();
2381   2        }
2382   1      
2383   1        return SUCCESS;
2384   1      }
2385          
2386          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
2387          #define PlatformP__LedsInit__init(void) LedsP__Init__init()
2388          //# 19 "/opt/emdoor/tos/platforms/zigbem/PlatformP.nc"
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 40  

2389          static  /*inline*/   error_t PlatformP__Init__init(void)
2390          //#line 19
2391          {
2392   1        uint8_t new_clkcon;
2393   1      
2394   1        SLEEP = (SLEEP & ~CC2430_SLEEP_MODE_MASK) | CC2430_SLEEP_POWERMODE_0;
2395   1      
2396   1      
2397   1      
2398   1        SLEEP &= ~(1 << CC2430_SLEEP_OSC_PD);
2399   1        while (!(SLEEP & (1 << CC2430_SLEEP_XOSC_STB))) ;
2400   1      
2401   1        new_clkcon = 0x0;
2402   1      
2403   1      
2404   1      
2405   1        new_clkcon = (new_clkcon & ~CC2430_CLKCON_TICKSPD_MASK) | CC2430_TICKF_DIV_8;
2406   1      
2407   1      
2408   1        new_clkcon &= ~(1 << CC2430_CLKCON_OSC32K);
2409   1      
2410   1      
2411   1      
2412   1      
2413   1      
2414   1      
2415   1        new_clkcon &= ~(1 << CC2430_CLKCON_OSC);
2416   1      
2417   1      
2418   1      
2419   1        CLKCON = new_clkcon;
2420   1      
2421   1      
2422   1      
2423   1      
2424   1      
2425   1      
2426   1      
2427   1        PlatformP__LedsInit__init();
2428   1      
2429   1      
2430   1      
2431   1      
2432   1      
2433   1        PlatformP__FlashIEEEInit__init();
2434   1        PlatformP__FlashIEEE__WriteToRegister();
2435   1        PlatformP__FlashIEEE__WriteToAM();
2436   1      
2437   1      
2438   1      
2439   1        return SUCCESS;
2440   1      }
2441          
2442          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
2443          #define RealMainP__PlatformInit__init(void) PlatformP__Init__init()
2444          //# 54 "/opt/emdoor/tos/interfaces/Scheduler.nc"
2445          #define RealMainP__Scheduler__runNextTask(void) SchedulerBasicP__Scheduler__runNextTask()
2446          //# 91 "/opt/emdoor/tos/system/LedsP.nc"
2447          static  /*inline*/    void LedsP__Leds__YellowLedOn(void)
2448          //#line 91
2449          {
2450   1        LedsP__YellowLed__set();
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 41  

2451   1      
2452   1        LedsP__BoardYellowLed__set();
2453   1      }
2454          
2455          //# 38 "/opt/emdoor/tos/interfaces/Leds.nc"
2456          #define BlinkM__Leds__YellowLedOn(void) LedsP__Leds__YellowLedOn()
2457          //# 94 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2458          static   /*inline*/     void HplCC2430GeneralIOC__P01__clr(void)
2459          //#line 94
2460          {
2461   1      //#line 94
2462   1        P0_1 = 0;
2463   1      }
2464          
2465          //# 30 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2466          #define LedsP__BoardRedLed__clr(void) HplCC2430GeneralIOC__P01__clr()
2467          //# 105 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2468          static   /*inline*/     void HplCC2430GeneralIOC__P13__clr(void)
2469          //#line 105
2470          {
2471   1      //#line 105
2472   1        P1_3 = 0;
2473   1      }
2474          
2475          //# 30 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2476          #define LedsP__RedLed__clr(void) HplCC2430GeneralIOC__P13__clr()
2477          //# 56 "/opt/emdoor/tos/system/LedsP.nc"
2478          static  /*inline*/    void LedsP__Leds__RedLedOff(void)
2479          //#line 56
2480          {
2481   1        LedsP__RedLed__clr();
2482   1      
2483   1        LedsP__BoardRedLed__clr();
2484   1      }
2485          
2486          //# 11 "/opt/emdoor/tos/interfaces/Leds.nc"
2487          #define BlinkM__Leds__RedLedOff(void) LedsP__Leds__RedLedOff()
2488          //# 70 "/opt/emdoor/tos/system/LedsP.nc"
2489          static  /*inline*/    void LedsP__Leds__BlueLedOn(void)
2490          //#line 70
2491          {
2492   1        LedsP__BlueLed__set();
2493   1      
2494   1        LedsP__BoardBlueLed__set();
2495   1      }
2496          
2497          //# 22 "/opt/emdoor/tos/interfaces/Leds.nc"
2498          #define BlinkM__Leds__BlueLedOn(void) LedsP__Leds__BlueLedOn()
2499          //# 102 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2500          static   /*inline*/     void HplCC2430GeneralIOC__P10__clr(void)
2501          //#line 102
2502          {
2503   1      //#line 102
2504   1        P1_0 = 0;
2505   1      }
2506          
2507          //# 30 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2508          #define LedsP__BoardGreenLed__clr(void) HplCC2430GeneralIOC__P10__clr()
2509          //# 118 "/opt/emdoor/tos/system/LedsP.nc"
2510          static  /*inline*/    void LedsP__Leds__GreenLedOff(void)
2511          //#line 118
2512          {
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 42  

2513   1        LedsP__BoardGreenLed__clr();
2514   1      }
2515          
2516          //# 62 "/opt/emdoor/tos/interfaces/Leds.nc"
2517          #define BlinkM__Leds__GreenLedOff(void) LedsP__Leds__GreenLedOff()
2518          //# 106 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2519          static   /*inline*/     void HplCC2430GeneralIOC__P14__clr(void)
2520          //#line 106
2521          {
2522   1      //#line 106
2523   1        P1_4 = 0;
2524   1      }
2525          
2526          //# 30 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2527          #define LedsP__BoardYellowLed__clr(void) HplCC2430GeneralIOC__P14__clr()
2528          //# 111 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2529          static   /*inline*/     void HplCC2430GeneralIOC__P20__clr(void)
2530          //#line 111
2531          {
2532   1      //#line 111
2533   1        P2_0 = 0;
2534   1      }
2535          
2536          //# 30 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2537          #define LedsP__YellowLed__clr(void) HplCC2430GeneralIOC__P20__clr()
2538          //# 98 "/opt/emdoor/tos/system/LedsP.nc"
2539          static  /*inline*/    void LedsP__Leds__YellowLedOff(void)
2540          //#line 98
2541          {
2542   1        LedsP__YellowLed__clr();
2543   1      
2544   1        LedsP__BoardYellowLed__clr();
2545   1      }
2546          
2547          //# 43 "/opt/emdoor/tos/interfaces/Leds.nc"
2548          #define BlinkM__Leds__YellowLedOff(void) LedsP__Leds__YellowLedOff()
2549          //# 49 "/opt/emdoor/tos/system/LedsP.nc"
2550          static  /*inline*/    void LedsP__Leds__RedLedOn(void)
2551          //#line 49
2552          {
2553   1        LedsP__RedLed__set();
2554   1      
2555   1        LedsP__BoardRedLed__set();
2556   1      }
2557          
2558          //# 6 "/opt/emdoor/tos/interfaces/Leds.nc"
2559          #define BlinkM__Leds__RedLedOn(void) LedsP__Leds__RedLedOn()
2560          //# 103 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2561          static   /*inline*/     void HplCC2430GeneralIOC__P11__clr(void)
2562          //#line 103
2563          {
2564   1      //#line 103
2565   1        P1_1 = 0;
2566   1      }
2567          
2568          //# 30 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2569          #define LedsP__BoardBlueLed__clr(void) HplCC2430GeneralIOC__P11__clr()
2570          //# 104 "/opt/emdoor/tos/chips/cc2430/pins/HplCC2430GeneralIOC.nc"
2571          static   /*inline*/     void HplCC2430GeneralIOC__P12__clr(void)
2572          //#line 104
2573          {
2574   1      //#line 104
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 43  

2575   1        P1_2 = 0;
2576   1      }
2577          
2578          //# 30 "/opt/emdoor/tos/interfaces/GeneralIO.nc"
2579          #define LedsP__BlueLed__clr(void) HplCC2430GeneralIOC__P12__clr()
2580          //# 77 "/opt/emdoor/tos/system/LedsP.nc"
2581          static  /*inline*/    void LedsP__Leds__BlueLedOff(void)
2582          //#line 77
2583          {
2584   1        LedsP__BlueLed__clr();
2585   1      
2586   1        LedsP__BoardBlueLed__clr();
2587   1      }
2588          
2589          //# 27 "/opt/emdoor/tos/interfaces/Leds.nc"
2590          #define BlinkM__Leds__BlueLedOff(void) LedsP__Leds__BlueLedOff()
2591          //# 114 "/opt/emdoor/tos/system/LedsP.nc"
2592          static  /*inline*/    void LedsP__Leds__GreenLedOn(void)
2593          //#line 114
2594          {
2595   1        LedsP__BoardGreenLed__set();
2596   1      }
2597          
2598          //# 57 "/opt/emdoor/tos/interfaces/Leds.nc"
2599          #define BlinkM__Leds__GreenLedOn(void) LedsP__Leds__GreenLedOn()
2600          //# 94 "/opt/emdoor/tos/system/RealMainP.nc"
2601          static  /*inline*/    error_t RealMainP__SoftwareInit__default__init(void)
2602          //#line 94
2603          {
2604   1      //#line 94
2605   1        return SUCCESS;
2606   1      }
2607          
2608          //# 51 "/opt/emdoor/tos/interfaces/Init.nc"
2609          #define RealMainP__SoftwareInit__init(void) RealMainP__SoftwareInit__default__init()
2610          //# 86 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
2611          static  /*inline*/  bool SchedulerBasicP__isWaiting(uint8_t id)
2612          {
2613   1        return SchedulerBasicP__m_next[id] != SchedulerBasicP__NO_TASK || SchedulerBasicP__m_tail == id;
2614   1      }
2615          
2616          static  /*inline*/  bool SchedulerBasicP__pushTask(uint8_t id)
2617          {
2618   1        if (!SchedulerBasicP__isWaiting(id)) 
2619   1          {
2620   2            if (SchedulerBasicP__m_head == SchedulerBasicP__NO_TASK) 
2621   2              {
2622   3                SchedulerBasicP__m_head = id;
2623   3                SchedulerBasicP__m_tail = id;
2624   3              }
2625   2            else 
2626   2              {
2627   3                SchedulerBasicP__m_next[SchedulerBasicP__m_tail] = id;
2628   3                SchedulerBasicP__m_tail = id;
2629   3              }
2630   2            return TRUE;
2631   2          }
2632   1        else 
2633   1          {
2634   2            return FALSE;
2635   2          }
2636   1      }
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 44  

2637          
2638          //#line 174
2639          static  /*inline*/    error_t SchedulerBasicP__TaskBasic__postTask(uint8_t id)
2640          {
2641   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2642   2      //#line 176
2643   2          {
2644   3      //#line 176
2645   3            {
2646   4              unsigned char __nesc_temp = 
2647   4      //#line 176
2648   4              SchedulerBasicP__pushTask(id) ? SUCCESS : EBUSY;
2649   4      
2650   4              {
2651   5      //#line 176
2652   5                __nesc_atomic_end(__nesc_atomic); 
2653   5      //#line 176
2654   5                return __nesc_temp;
2655   5              }
2656   4            }
2657   3          }
2658   2      //#line 179
2659   2          __nesc_atomic_end(__nesc_atomic); }
2660   1      }
2661          
2662          //# 56 "/opt/emdoor/tos/interfaces/TaskBasic.nc"
2663          #define BlinkM__DemoLed__postTask(void) SchedulerBasicP__TaskBasic__postTask(BlinkM__DemoLed)
2664          //# 38 "BlinkM.nc"
2665          static  /*inline*/   void BlinkM__Boot__booted(void)
2666          //#line 38
2667          {
2668   1        BlinkM__DemoLed__postTask();
2669   1      }
2670          
2671          //# 49 "/opt/emdoor/tos/interfaces/Boot.nc"
2672          #define RealMainP__Boot__booted(void) BlinkM__Boot__booted()
2673          //# 57 "/opt/emdoor/tos/lib/zigbem/power/McuSleepP.nc"
2674          static  /*inline*/    void McuSleepP__McuSleepControl__default__afterWakeup(void)
2675          {
2676   1      }
2677          
2678          //# 9 "/opt/emdoor/tos/lib/zigbem/power/McuSleepControl.nc"
2679          #define McuSleepP__McuSleepControl__afterWakeup(void) McuSleepP__McuSleepControl__default__afterWakeup()
2680          //# 65 "/opt/emdoor/tos/chips/cc2430/mcs51/mcs51hardware.h"
2681          static   /*inline*/   void __nesc_enable_interrupt(void)
2682          //#line 65
2683          {
2684   1      //#line 65
2685   1        EA = 1;
2686   1      }
2687          
2688          //# 54 "/opt/emdoor/tos/lib/zigbem/power/McuSleepP.nc"
2689          static  /*inline*/    void McuSleepP__McuSleepControl__default__beforeSleep(void)
2690          {
2691   1      }
2692          
2693          //# 7 "/opt/emdoor/tos/lib/zigbem/power/McuSleepControl.nc"
2694          #define McuSleepP__McuSleepControl__beforeSleep(void) McuSleepP__McuSleepControl__default__beforeSleep()
2695          //# 37 "/opt/emdoor/tos/lib/zigbem/power/McuSleepLockManP.nc"
2696          static  /*inline*/   bool /*McuSleepLockManC.McuSleepLockManP*/McuSleepLockManP__0__McuSleepLockMan__isLoc
             -ked(void)
2697          {
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 45  

2698   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2699   2      //#line 39
2700   2          {
2701   3            unsigned char __nesc_temp = 
2702   3      //#line 39
2703   3            /*McuSleepLockManC.McuSleepLockManP*/McuSleepLockManP__0__lock_bitmap != 0x00000000;
2704   3      
2705   3            {
2706   4      //#line 39
2707   4              __nesc_atomic_end(__nesc_atomic); 
2708   4      //#line 39
2709   4              return __nesc_temp;
2710   4            }
2711   3          }
2712   2      //#line 41
2713   2          __nesc_atomic_end(__nesc_atomic); }
2714   1      }
2715          
2716          //# 3 "/opt/emdoor/tos/lib/zigbem/power/McuSleepLockMan.nc"
2717          #define McuSleepP__McuSleepLockMan__isLocked(void) McuSleepLockManP__0__McuSleepLockMan__isLocked()
2718          //# 27 "/opt/emdoor/tos/lib/zigbem/power/McuSleepP.nc"
2719          static  /*inline*/    void McuSleepP__McuSleep__sleep(void)
2720          {
2721   1      
2722   1      
2723   1        if (McuSleepP__m_need_sleep && !McuSleepP__McuSleepLockMan__isLocked()) 
2724   1          {
2725   2            ;
2726   2            SLEEP = (SLEEP & ~CC2430_SLEEP_MODE_MASK) | CC2430_SLEEP_POWERMODE_2;
2727   2      
2728   2            McuSleepP__McuSleepControl__beforeSleep();
2729   2      
2730   2            __nesc_enable_interrupt();
2731   2      
2732   2            PCON = 0x01;
2733   2            ;
2734   2      
2735   2            { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2736   3      //#line 43
2737   3              McuSleepP__m_need_sleep = FALSE;
2738   3      //#line 43
2739   3              __nesc_atomic_end(__nesc_atomic); }
2740   2      
2741   2            McuSleepP__McuSleepControl__afterWakeup();
2742   2          }
2743   1        else 
2744   1          {
2745   2          }
2746   1      }
2747          
2748          //# 59 "/opt/emdoor/tos/interfaces/McuSleep.nc"
2749          #define SchedulerBasicP__McuSleep__sleep(void) McuSleepP__McuSleep__sleep()
2750          //# 179 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
2751          static  /*inline*/    void SchedulerBasicP__TaskBasic__default__runTask(uint8_t id)
2752          {
2753   1      }
2754          
2755          //# 64 "/opt/emdoor/tos/interfaces/TaskBasic.nc"
2756           /*inline*/  static  void SchedulerBasicP__TaskBasic__runTask(uint8_t arg_0x7ed54e00){
2757   1      //#line 64
2758   1        switch (arg_0x7ed54e00) {
2759   2      //#line 64
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 46  

2760   2          case BlinkM__DemoLed:
2761   2      //#line 64
2762   2            BlinkM__DemoLed__runTask();
2763   2      //#line 64
2764   2            break;
2765   2      //#line 64
2766   2          default:
2767   2      //#line 64
2768   2            SchedulerBasicP__TaskBasic__default__runTask(arg_0x7ed54e00);
2769   2      //#line 64
2770   2            break;
2771   2      //#line 64
2772   2          }
2773   1      //#line 64
2774   1      }
2775          //#line 64
2776          //# 67 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
2777          static   /*inline*/   uint8_t SchedulerBasicP__popTask(void)
2778          {
2779   1        if (SchedulerBasicP__m_head != SchedulerBasicP__NO_TASK) 
2780   1          {
2781   2            uint8_t id = SchedulerBasicP__m_head;
2782   2      
2783   2      //#line 72
2784   2            SchedulerBasicP__m_head = SchedulerBasicP__m_next[SchedulerBasicP__m_head];
2785   2            if (SchedulerBasicP__m_head == SchedulerBasicP__NO_TASK) 
2786   2              {
2787   3                SchedulerBasicP__m_tail = SchedulerBasicP__NO_TASK;
2788   3              }
2789   2            SchedulerBasicP__m_next[id] = SchedulerBasicP__NO_TASK;
2790   2            return id;
2791   2          }
2792   1        else 
2793   1          {
2794   2            return SchedulerBasicP__NO_TASK;
2795   2          }
2796   1      }
2797          
2798          //#line 139
2799          static  /*inline*/   void SchedulerBasicP__Scheduler__taskLoop(void)
2800          {
2801   1        for (; ; ) 
2802   1          {
2803   2            uint8_t nextTask;
2804   2      
2805   2            { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2806   3              {
2807   4                nextTask = SchedulerBasicP__popTask();
2808   4              }
2809   3      //#line 148
2810   3              __nesc_atomic_end(__nesc_atomic); }
2811   2      
2812   2            current_task_id = nextTask;
2813   2      
2814   2            if (nextTask != SchedulerBasicP__NO_TASK) 
2815   2              {
2816   3                SchedulerBasicP__TaskBasic__runTask(nextTask);
2817   3              }
2818   2      
2819   2            SchedulerBasicP__McuSleep__sleep();
2820   2          }
2821   1      }
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 47  

2822          
2823          //# 61 "/opt/emdoor/tos/interfaces/Scheduler.nc"
2824          #define RealMainP__Scheduler__taskLoop(void) SchedulerBasicP__Scheduler__taskLoop()
2825          //# 64 "/opt/emdoor/tos/chips/cc2430/mcs51/mcs51hardware.h"
2826          static   /*inline*/   void __nesc_disable_interrupt(void)
2827          //#line 64
2828          {
2829   1      //#line 64
2830   1        EA = 0;
2831   1      }
2832          
2833          //# 52 "/opt/emdoor/tos/system/RealMainP.nc"
2834            int main(void)
2835          //#line 52
2836          {
2837   1        { __nesc_atomic_t __nesc_atomic = __nesc_atomic_start();
2838   2          {
2839   3      
2840   3      
2841   3      
2842   3      
2843   3      
2844   3            {
2845   4            }
2846   3      //#line 60
2847   3            ;
2848   3      
2849   3            RealMainP__Scheduler__init();
2850   3      
2851   3      
2852   3      
2853   3      
2854   3      
2855   3            RealMainP__PlatformInit__init();
2856   3            while (RealMainP__Scheduler__runNextTask()) ;
2857   3      
2858   3      
2859   3      
2860   3      
2861   3      
2862   3            RealMainP__SoftwareInit__init();
2863   3            while (RealMainP__Scheduler__runNextTask()) ;
2864   3          }
2865   2      //#line 77
2866   2          __nesc_atomic_end(__nesc_atomic); }
2867   1      
2868   1      
2869   1        __nesc_enable_interrupt();
2870   1      
2871   1        RealMainP__Boot__booted();
2872   1      
2873   1      
2874   1        RealMainP__Scheduler__taskLoop();
2875   1      
2876   1      
2877   1      
2878   1      
2879   1        return -1;
2880   1      }
2881          
2882          //# 53 "/opt/emdoor/tos/platforms/zigbem/FlashIEEEP.nc"
2883          static  uint16_t FlashIEEEP__FlashIEEE__GetPANID(void)
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 48  

2884          {
2885   1        return (FlashIEEEP__m_ieee[4] << 8) | FlashIEEEP__m_ieee[5];
2886   1      }
2887          
2888          
2889          static  uint16_t FlashIEEEP__FlashIEEE__GetShortAddress(void)
2890          {
2891   1        return (FlashIEEEP__m_ieee[6] << 8) | FlashIEEEP__m_ieee[7];
2892   1      }
2893          
2894          //# 123 "/opt/emdoor/tos/system/SchedulerBasicP.nc"
2895          static  bool SchedulerBasicP__Scheduler__runNextTask(void)
2896          {
2897   1        uint8_t nextTask;
2898   1      
2899   1        /* atomic removed: atomic calls only */
2900   1      //#line 127
2901   1        {
2902   2          nextTask = SchedulerBasicP__popTask();
2903   2      
2904   2          if (nextTask == SchedulerBasicP__NO_TASK) 
2905   2            {
2906   3              {
2907   4                unsigned char __nesc_temp = 
2908   4      //#line 132
2909   4                FALSE;
2910   4      
2911   4      //#line 132
2912   4                return __nesc_temp;
2913   4              }
2914   3            }
2915   2        }
2916   1      //#line 135
2917   1        SchedulerBasicP__TaskBasic__runTask(nextTask);
2918   1        return TRUE;
2919   1      }
2920          
2921          //# 13 "BlinkM.nc"
2922          static  void BlinkM__DemoLed__runTask(void)
2923          //#line 13
2924          {
2925   1        int i;
2926   1      //#line 14
2927   1        int j;
2928   1      
2929   1        while (1) {
2930   2            for (i = 0; i < 1000; i++) 
2931   2              for (j = 0; j < 500; j++) ;
2932   2      
2933   2            BlinkM__Leds__YellowLedOn();
2934   2            BlinkM__Leds__RedLedOff();
2935   2            BlinkM__Leds__BlueLedOn();
2936   2            BlinkM__Leds__GreenLedOff();
2937   2      
2938   2            for (i = 0; i < 1000; i++) 
2939   2              for (j = 0; j < 500; j++) ;
2940   2      
2941   2            BlinkM__Leds__YellowLedOff();
2942   2            BlinkM__Leds__RedLedOn();
2943   2            BlinkM__Leds__BlueLedOff();
2944   2            BlinkM__Leds__GreenLedOn();
2945   2          }
C51 COMPILER V9.00   APP                                                                   01/04/2022 08:02:17 PAGE 49  

2946   1      }
2947          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1015    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     26      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
